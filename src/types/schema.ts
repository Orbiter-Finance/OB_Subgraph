// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class challengeManager extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save challengeManager entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type challengeManager must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("challengeManager", id.toString(), this);
    }
  }

  static loadInBlock(id: string): challengeManager | null {
    return changetype<challengeManager | null>(
      store.get_in_block("challengeManager", id)
    );
  }

  static load(id: string): challengeManager | null {
    return changetype<challengeManager | null>(
      store.get("challengeManager", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get challengeId(): string {
    let value = this.get("challengeId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set challengeId(value: string) {
    this.set("challengeId", Value.fromString(value));
  }

  get mdcAddr(): string {
    let value = this.get("mdcAddr");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set mdcAddr(value: string) {
    this.set("mdcAddr", Value.fromString(value));
  }

  get owner(): string {
    let value = this.get("owner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get challengeStatuses(): string {
    let value = this.get("challengeStatuses");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set challengeStatuses(value: string) {
    this.set("challengeStatuses", Value.fromString(value));
  }

  get createChallenge(): Array<string> {
    let value = this.get("createChallenge");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set createChallenge(value: Array<string>) {
    this.set("createChallenge", Value.fromStringArray(value));
  }

  get sourceTxFrom(): string {
    let value = this.get("sourceTxFrom");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set sourceTxFrom(value: string) {
    this.set("sourceTxFrom", Value.fromString(value));
  }

  get challengeUserRatio(): BigInt {
    let value = this.get("challengeUserRatio");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set challengeUserRatio(value: BigInt) {
    this.set("challengeUserRatio", Value.fromBigInt(value));
  }

  get verifyChallengeSourceTimestamp(): BigInt {
    let value = this.get("verifyChallengeSourceTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set verifyChallengeSourceTimestamp(value: BigInt) {
    this.set("verifyChallengeSourceTimestamp", Value.fromBigInt(value));
  }

  get verifiedDataHash0(): string {
    let value = this.get("verifiedDataHash0");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set verifiedDataHash0(value: string) {
    this.set("verifiedDataHash0", Value.fromString(value));
  }

  get verifyPassChallenger(): string {
    let value = this.get("verifyPassChallenger");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set verifyPassChallenger(value: string) {
    this.set("verifyPassChallenger", Value.fromString(value));
  }

  get challengeSourceVerifier(): string {
    let value = this.get("challengeSourceVerifier");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set challengeSourceVerifier(value: string) {
    this.set("challengeSourceVerifier", Value.fromString(value));
  }

  get verifyChallengeSourceHash(): string {
    let value = this.get("verifyChallengeSourceHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set verifyChallengeSourceHash(value: string) {
    this.set("verifyChallengeSourceHash", Value.fromString(value));
  }

  get verifyChallengeSourceNumber(): BigInt {
    let value = this.get("verifyChallengeSourceNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set verifyChallengeSourceNumber(value: BigInt) {
    this.set("verifyChallengeSourceNumber", Value.fromBigInt(value));
  }

  get challengeDestVerifier(): string {
    let value = this.get("challengeDestVerifier");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set challengeDestVerifier(value: string) {
    this.set("challengeDestVerifier", Value.fromString(value));
  }

  get verifyChallengeDestTimestamp(): BigInt {
    let value = this.get("verifyChallengeDestTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set verifyChallengeDestTimestamp(value: BigInt) {
    this.set("verifyChallengeDestTimestamp", Value.fromBigInt(value));
  }

  get verifyChallengeDestHash(): string {
    let value = this.get("verifyChallengeDestHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set verifyChallengeDestHash(value: string) {
    this.set("verifyChallengeDestHash", Value.fromString(value));
  }

  get verifyChallengeDestNumber(): BigInt {
    let value = this.get("verifyChallengeDestNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set verifyChallengeDestNumber(value: BigInt) {
    this.set("verifyChallengeDestNumber", Value.fromBigInt(value));
  }

  get mdc(): MDCLoader {
    return new MDCLoader("challengeManager", this.get("id")!.toString(), "mdc");
  }
}

export class createChallenge extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save createChallenge entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type createChallenge must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("createChallenge", id.toString(), this);
    }
  }

  static loadInBlock(id: string): createChallenge | null {
    return changetype<createChallenge | null>(
      store.get_in_block("createChallenge", id)
    );
  }

  static load(id: string): createChallenge | null {
    return changetype<createChallenge | null>(store.get("createChallenge", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get challengeId(): string {
    let value = this.get("challengeId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set challengeId(value: string) {
    this.set("challengeId", Value.fromString(value));
  }

  get sourceChainId(): BigInt {
    let value = this.get("sourceChainId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set sourceChainId(value: BigInt) {
    this.set("sourceChainId", Value.fromBigInt(value));
  }

  get ruleKey(): string {
    let value = this.get("ruleKey");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set ruleKey(value: string) {
    this.set("ruleKey", Value.fromString(value));
  }

  get sourceTxHash(): string {
    let value = this.get("sourceTxHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set sourceTxHash(value: string) {
    this.set("sourceTxHash", Value.fromString(value));
  }

  get sourceTxTime(): BigInt {
    let value = this.get("sourceTxTime");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set sourceTxTime(value: BigInt) {
    this.set("sourceTxTime", Value.fromBigInt(value));
  }

  get challenger(): string {
    let value = this.get("challenger");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set challenger(value: string) {
    this.set("challenger", Value.fromString(value));
  }

  get freezeToken(): string {
    let value = this.get("freezeToken");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set freezeToken(value: string) {
    this.set("freezeToken", Value.fromString(value));
  }

  get freezeAmountMaker(): BigInt {
    let value = this.get("freezeAmountMaker");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set freezeAmountMaker(value: BigInt) {
    this.set("freezeAmountMaker", Value.fromBigInt(value));
  }

  get freezeAmountChallenger(): BigInt {
    let value = this.get("freezeAmountChallenger");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set freezeAmountChallenger(value: BigInt) {
    this.set("freezeAmountChallenger", Value.fromBigInt(value));
  }

  get createChallengeTimestamp(): BigInt {
    let value = this.get("createChallengeTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createChallengeTimestamp(value: BigInt) {
    this.set("createChallengeTimestamp", Value.fromBigInt(value));
  }

  get sourceTxBlockNum(): BigInt {
    let value = this.get("sourceTxBlockNum");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set sourceTxBlockNum(value: BigInt) {
    this.set("sourceTxBlockNum", Value.fromBigInt(value));
  }

  get sourceTxIndex(): BigInt {
    let value = this.get("sourceTxIndex");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set sourceTxIndex(value: BigInt) {
    this.set("sourceTxIndex", Value.fromBigInt(value));
  }

  get challengeNodeNumberParent(): string {
    let value = this.get("challengeNodeNumberParent");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set challengeNodeNumberParent(value: string) {
    this.set("challengeNodeNumberParent", Value.fromString(value));
  }

  get challengeNodeNumber(): string {
    let value = this.get("challengeNodeNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set challengeNodeNumber(value: string) {
    this.set("challengeNodeNumber", Value.fromString(value));
  }

  get isVerifyPass(): boolean {
    let value = this.get("isVerifyPass");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set isVerifyPass(value: boolean) {
    this.set("isVerifyPass", Value.fromBoolean(value));
  }

  get totalChallengeVerifyCost(): BigInt {
    let value = this.get("totalChallengeVerifyCost");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalChallengeVerifyCost(value: BigInt) {
    this.set("totalChallengeVerifyCost", Value.fromBigInt(value));
  }

  get createChallengeHash(): string {
    let value = this.get("createChallengeHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set createChallengeHash(value: string) {
    this.set("createChallengeHash", Value.fromString(value));
  }

  get createChallengeBlockNumber(): BigInt {
    let value = this.get("createChallengeBlockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createChallengeBlockNumber(value: BigInt) {
    this.set("createChallengeBlockNumber", Value.fromBigInt(value));
  }

  get liquidator(): string | null {
    let value = this.get("liquidator");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set liquidator(value: string | null) {
    if (!value) {
      this.unset("liquidator");
    } else {
      this.set("liquidator", Value.fromString(<string>value));
    }
  }

  get liquidationTimestamp(): BigInt | null {
    let value = this.get("liquidationTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set liquidationTimestamp(value: BigInt | null) {
    if (!value) {
      this.unset("liquidationTimestamp");
    } else {
      this.set("liquidationTimestamp", Value.fromBigInt(<BigInt>value));
    }
  }

  get liquidationHash(): string | null {
    let value = this.get("liquidationHash");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set liquidationHash(value: string | null) {
    if (!value) {
      this.unset("liquidationHash");
    } else {
      this.set("liquidationHash", Value.fromString(<string>value));
    }
  }

  get liquidationBlockNumber(): BigInt | null {
    let value = this.get("liquidationBlockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set liquidationBlockNumber(value: BigInt | null) {
    if (!value) {
      this.unset("liquidationBlockNumber");
    } else {
      this.set("liquidationBlockNumber", Value.fromBigInt(<BigInt>value));
    }
  }

  get challengeManager(): challengeManagerLoader {
    return new challengeManagerLoader(
      "createChallenge",
      this.get("id")!.toString(),
      "challengeManager"
    );
  }
}

export class withdrawRequestList extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save withdrawRequestList entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type withdrawRequestList must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("withdrawRequestList", id.toString(), this);
    }
  }

  static loadInBlock(id: string): withdrawRequestList | null {
    return changetype<withdrawRequestList | null>(
      store.get_in_block("withdrawRequestList", id)
    );
  }

  static load(id: string): withdrawRequestList | null {
    return changetype<withdrawRequestList | null>(
      store.get("withdrawRequestList", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get owner(): string {
    let value = this.get("owner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get requestAmount(): BigInt {
    let value = this.get("requestAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set requestAmount(value: BigInt) {
    this.set("requestAmount", Value.fromBigInt(value));
  }

  get minWithdrawTimestamp(): BigInt {
    let value = this.get("minWithdrawTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set minWithdrawTimestamp(value: BigInt) {
    this.set("minWithdrawTimestamp", Value.fromBigInt(value));
  }

  get requestToken(): string {
    let value = this.get("requestToken");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set requestToken(value: string) {
    this.set("requestToken", Value.fromString(value));
  }

  get latestUpdateHash(): string {
    let value = this.get("latestUpdateHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set latestUpdateHash(value: string) {
    this.set("latestUpdateHash", Value.fromString(value));
  }

  get latestUpdateTimestamp(): BigInt {
    let value = this.get("latestUpdateTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set latestUpdateTimestamp(value: BigInt) {
    this.set("latestUpdateTimestamp", Value.fromBigInt(value));
  }

  get latestUpdateBlockNumber(): BigInt {
    let value = this.get("latestUpdateBlockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set latestUpdateBlockNumber(value: BigInt) {
    this.set("latestUpdateBlockNumber", Value.fromBigInt(value));
  }

  get mdc(): MDCLoader {
    return new MDCLoader(
      "withdrawRequestList",
      this.get("id")!.toString(),
      "mdc"
    );
  }
}

export class columnArraySnapshot extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save columnArraySnapshot entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type columnArraySnapshot must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("columnArraySnapshot", id.toString(), this);
    }
  }

  static loadInBlock(id: string): columnArraySnapshot | null {
    return changetype<columnArraySnapshot | null>(
      store.get_in_block("columnArraySnapshot", id)
    );
  }

  static load(id: string): columnArraySnapshot | null {
    return changetype<columnArraySnapshot | null>(
      store.get("columnArraySnapshot", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get columnArrayHash(): string {
    let value = this.get("columnArrayHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set columnArrayHash(value: string) {
    this.set("columnArrayHash", Value.fromString(value));
  }

  get dealers(): Array<string> {
    let value = this.get("dealers");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set dealers(value: Array<string>) {
    this.set("dealers", Value.fromStringArray(value));
  }

  get dealerMappingSnapshot(): Array<string> {
    let value = this.get("dealerMappingSnapshot");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set dealerMappingSnapshot(value: Array<string>) {
    this.set("dealerMappingSnapshot", Value.fromStringArray(value));
  }

  get ebcs(): Array<string> {
    let value = this.get("ebcs");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set ebcs(value: Array<string>) {
    this.set("ebcs", Value.fromStringArray(value));
  }

  get ebcMappingSnapshot(): Array<string> {
    let value = this.get("ebcMappingSnapshot");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set ebcMappingSnapshot(value: Array<string>) {
    this.set("ebcMappingSnapshot", Value.fromStringArray(value));
  }

  get chainIds(): Array<BigInt> {
    let value = this.get("chainIds");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigIntArray();
    }
  }

  set chainIds(value: Array<BigInt>) {
    this.set("chainIds", Value.fromBigIntArray(value));
  }

  get chainIdMappingSnapshot(): Array<string> {
    let value = this.get("chainIdMappingSnapshot");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set chainIdMappingSnapshot(value: Array<string>) {
    this.set("chainIdMappingSnapshot", Value.fromStringArray(value));
  }

  get columnArrayStatuses(): string {
    let value = this.get("columnArrayStatuses");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set columnArrayStatuses(value: string) {
    this.set("columnArrayStatuses", Value.fromString(value));
  }

  get enableTimestamp(): BigInt {
    let value = this.get("enableTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set enableTimestamp(value: BigInt) {
    this.set("enableTimestamp", Value.fromBigInt(value));
  }

  get latestUpdateHash(): string {
    let value = this.get("latestUpdateHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set latestUpdateHash(value: string) {
    this.set("latestUpdateHash", Value.fromString(value));
  }

  get latestUpdateTimestamp(): BigInt {
    let value = this.get("latestUpdateTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set latestUpdateTimestamp(value: BigInt) {
    this.set("latestUpdateTimestamp", Value.fromBigInt(value));
  }

  get latestUpdateBlockNumber(): BigInt {
    let value = this.get("latestUpdateBlockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set latestUpdateBlockNumber(value: BigInt) {
    this.set("latestUpdateBlockNumber", Value.fromBigInt(value));
  }

  get mdc(): MDCLoader {
    return new MDCLoader(
      "columnArraySnapshot",
      this.get("id")!.toString(),
      "mdc"
    );
  }
}

export class responseMakersSnapshot extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save responseMakersSnapshot entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type responseMakersSnapshot must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("responseMakersSnapshot", id.toString(), this);
    }
  }

  static loadInBlock(id: string): responseMakersSnapshot | null {
    return changetype<responseMakersSnapshot | null>(
      store.get_in_block("responseMakersSnapshot", id)
    );
  }

  static load(id: string): responseMakersSnapshot | null {
    return changetype<responseMakersSnapshot | null>(
      store.get("responseMakersSnapshot", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get responseMakerList(): Array<string> {
    let value = this.get("responseMakerList");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set responseMakerList(value: Array<string>) {
    this.set("responseMakerList", Value.fromStringArray(value));
  }

  get enableTimestamp(): BigInt | null {
    let value = this.get("enableTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set enableTimestamp(value: BigInt | null) {
    if (!value) {
      this.unset("enableTimestamp");
    } else {
      this.set("enableTimestamp", Value.fromBigInt(<BigInt>value));
    }
  }

  get owner(): string {
    let value = this.get("owner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get mdc(): MDCLoader {
    return new MDCLoader(
      "responseMakersSnapshot",
      this.get("id")!.toString(),
      "mdc"
    );
  }

  get latestUpdateHash(): string | null {
    let value = this.get("latestUpdateHash");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set latestUpdateHash(value: string | null) {
    if (!value) {
      this.unset("latestUpdateHash");
    } else {
      this.set("latestUpdateHash", Value.fromString(<string>value));
    }
  }

  get latestUpdateTimestamp(): BigInt | null {
    let value = this.get("latestUpdateTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set latestUpdateTimestamp(value: BigInt | null) {
    if (!value) {
      this.unset("latestUpdateTimestamp");
    } else {
      this.set("latestUpdateTimestamp", Value.fromBigInt(<BigInt>value));
    }
  }

  get latestUpdateBlockNumber(): BigInt | null {
    let value = this.get("latestUpdateBlockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set latestUpdateBlockNumber(value: BigInt | null) {
    if (!value) {
      this.unset("latestUpdateBlockNumber");
    } else {
      this.set("latestUpdateBlockNumber", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class MDC extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save MDC entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type MDC must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("MDC", id.toString(), this);
    }
  }

  static loadInBlock(id: string): MDC | null {
    return changetype<MDC | null>(store.get_in_block("MDC", id));
  }

  static load(id: string): MDC | null {
    return changetype<MDC | null>(store.get("MDC", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get owner(): string {
    let value = this.get("owner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get factoryAddr(): string {
    let value = this.get("factoryAddr");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set factoryAddr(value: string) {
    this.set("factoryAddr", Value.fromString(value));
  }

  get manager(): string | null {
    let value = this.get("manager");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set manager(value: string | null) {
    if (!value) {
      this.unset("manager");
    } else {
      this.set("manager", Value.fromString(<string>value));
    }
  }

  get allRulesInfo(): Array<string> {
    let value = this.get("allRulesInfo");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set allRulesInfo(value: Array<string>) {
    this.set("allRulesInfo", Value.fromStringArray(value));
  }

  get responseMakersSnapshot(): Array<string> {
    let value = this.get("responseMakersSnapshot");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set responseMakersSnapshot(value: Array<string>) {
    this.set("responseMakersSnapshot", Value.fromStringArray(value));
  }

  get currBoundSpvInfo(): Array<string> {
    let value = this.get("currBoundSpvInfo");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set currBoundSpvInfo(value: Array<string>) {
    this.set("currBoundSpvInfo", Value.fromStringArray(value));
  }

  get columnArraySnapshot(): Array<string> {
    let value = this.get("columnArraySnapshot");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set columnArraySnapshot(value: Array<string>) {
    this.set("columnArraySnapshot", Value.fromStringArray(value));
  }

  get challengeManager(): Array<string> {
    let value = this.get("challengeManager");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set challengeManager(value: Array<string>) {
    this.set("challengeManager", Value.fromStringArray(value));
  }

  get withdrawRequestList(): Array<string> {
    let value = this.get("withdrawRequestList");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set withdrawRequestList(value: Array<string>) {
    this.set("withdrawRequestList", Value.fromStringArray(value));
  }

  get factory(): FactoryManagerLoader {
    return new FactoryManagerLoader(
      "MDC",
      this.get("id")!.toString(),
      "factory"
    );
  }

  get ebc(): ebcRelLoader {
    return new ebcRelLoader("MDC", this.get("id")!.toString(), "ebc");
  }

  get dealer(): DealerLoader {
    return new DealerLoader("MDC", this.get("id")!.toString(), "dealer");
  }

  get createblockNumber(): BigInt {
    let value = this.get("createblockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createblockNumber(value: BigInt) {
    this.set("createblockNumber", Value.fromBigInt(value));
  }

  get createblockTimestamp(): BigInt {
    let value = this.get("createblockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createblockTimestamp(value: BigInt) {
    this.set("createblockTimestamp", Value.fromBigInt(value));
  }

  get createtransactionHash(): string {
    let value = this.get("createtransactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set createtransactionHash(value: string) {
    this.set("createtransactionHash", Value.fromString(value));
  }

  get latestUpdatetransactionHash(): string {
    let value = this.get("latestUpdatetransactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set latestUpdatetransactionHash(value: string) {
    this.set("latestUpdatetransactionHash", Value.fromString(value));
  }
}

export class allRulesInfo extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save allRulesInfo entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type allRulesInfo must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("allRulesInfo", id.toString(), this);
    }
  }

  static loadInBlock(id: string): allRulesInfo | null {
    return changetype<allRulesInfo | null>(
      store.get_in_block("allRulesInfo", id)
    );
  }

  static load(id: string): allRulesInfo | null {
    return changetype<allRulesInfo | null>(store.get("allRulesInfo", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get sameRuleKeySnapshot(): Array<string> {
    let value = this.get("sameRuleKeySnapshot");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set sameRuleKeySnapshot(value: Array<string>) {
    this.set("sameRuleKeySnapshot", Value.fromStringArray(value));
  }

  get updateNumber(): BigInt {
    let value = this.get("updateNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set updateNumber(value: BigInt) {
    this.set("updateNumber", Value.fromBigInt(value));
  }

  get ruleKey(): string {
    let value = this.get("ruleKey");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set ruleKey(value: string) {
    this.set("ruleKey", Value.fromString(value));
  }

  get mdc(): MDCLoader {
    return new MDCLoader("allRulesInfo", this.get("id")!.toString(), "mdc");
  }

  get ebc(): ebcRelLoader {
    return new ebcRelLoader("allRulesInfo", this.get("id")!.toString(), "ebc");
  }

  get latestUpdateHash(): string | null {
    let value = this.get("latestUpdateHash");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set latestUpdateHash(value: string | null) {
    if (!value) {
      this.unset("latestUpdateHash");
    } else {
      this.set("latestUpdateHash", Value.fromString(<string>value));
    }
  }

  get latestUpdateTimestamp(): BigInt | null {
    let value = this.get("latestUpdateTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set latestUpdateTimestamp(value: BigInt | null) {
    if (!value) {
      this.unset("latestUpdateTimestamp");
    } else {
      this.set("latestUpdateTimestamp", Value.fromBigInt(<BigInt>value));
    }
  }

  get latestUpdateBlockNumber(): BigInt | null {
    let value = this.get("latestUpdateBlockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set latestUpdateBlockNumber(value: BigInt | null) {
    if (!value) {
      this.unset("latestUpdateBlockNumber");
    } else {
      this.set("latestUpdateBlockNumber", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class sameRuleKeySnapshot extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save sameRuleKeySnapshot entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type sameRuleKeySnapshot must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("sameRuleKeySnapshot", id.toString(), this);
    }
  }

  static loadInBlock(id: string): sameRuleKeySnapshot | null {
    return changetype<sameRuleKeySnapshot | null>(
      store.get_in_block("sameRuleKeySnapshot", id)
    );
  }

  static load(id: string): sameRuleKeySnapshot | null {
    return changetype<sameRuleKeySnapshot | null>(
      store.get("sameRuleKeySnapshot", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get ruleKey(): string {
    let value = this.get("ruleKey");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set ruleKey(value: string) {
    this.set("ruleKey", Value.fromString(value));
  }

  get ruleRoot(): string {
    let value = this.get("ruleRoot");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set ruleRoot(value: string) {
    this.set("ruleRoot", Value.fromString(value));
  }

  get ruleVersion(): BigInt {
    let value = this.get("ruleVersion");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set ruleVersion(value: BigInt) {
    this.set("ruleVersion", Value.fromBigInt(value));
  }

  get owner(): string {
    let value = this.get("owner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get currUpdateNumber(): BigInt {
    let value = this.get("currUpdateNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set currUpdateNumber(value: BigInt) {
    this.set("currUpdateNumber", Value.fromBigInt(value));
  }

  get mdcAddr(): string {
    let value = this.get("mdcAddr");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set mdcAddr(value: string) {
    this.set("mdcAddr", Value.fromString(value));
  }

  get ebcAddr(): string {
    let value = this.get("ebcAddr");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set ebcAddr(value: string) {
    this.set("ebcAddr", Value.fromString(value));
  }

  get type(): string | null {
    let value = this.get("type");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set type(value: string | null) {
    if (!value) {
      this.unset("type");
    } else {
      this.set("type", Value.fromString(<string>value));
    }
  }

  get chain0(): BigInt | null {
    let value = this.get("chain0");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set chain0(value: BigInt | null) {
    if (!value) {
      this.unset("chain0");
    } else {
      this.set("chain0", Value.fromBigInt(<BigInt>value));
    }
  }

  get chain1(): BigInt | null {
    let value = this.get("chain1");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set chain1(value: BigInt | null) {
    if (!value) {
      this.unset("chain1");
    } else {
      this.set("chain1", Value.fromBigInt(<BigInt>value));
    }
  }

  get chain0Status(): i32 {
    let value = this.get("chain0Status");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set chain0Status(value: i32) {
    this.set("chain0Status", Value.fromI32(value));
  }

  get chain1Status(): i32 {
    let value = this.get("chain1Status");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set chain1Status(value: i32) {
    this.set("chain1Status", Value.fromI32(value));
  }

  get chain0Token(): string | null {
    let value = this.get("chain0Token");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set chain0Token(value: string | null) {
    if (!value) {
      this.unset("chain0Token");
    } else {
      this.set("chain0Token", Value.fromString(<string>value));
    }
  }

  get chain1Token(): string | null {
    let value = this.get("chain1Token");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set chain1Token(value: string | null) {
    if (!value) {
      this.unset("chain1Token");
    } else {
      this.set("chain1Token", Value.fromString(<string>value));
    }
  }

  get chain0minPrice(): BigInt | null {
    let value = this.get("chain0minPrice");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set chain0minPrice(value: BigInt | null) {
    if (!value) {
      this.unset("chain0minPrice");
    } else {
      this.set("chain0minPrice", Value.fromBigInt(<BigInt>value));
    }
  }

  get chain1minPrice(): BigInt | null {
    let value = this.get("chain1minPrice");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set chain1minPrice(value: BigInt | null) {
    if (!value) {
      this.unset("chain1minPrice");
    } else {
      this.set("chain1minPrice", Value.fromBigInt(<BigInt>value));
    }
  }

  get chain0maxPrice(): BigInt | null {
    let value = this.get("chain0maxPrice");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set chain0maxPrice(value: BigInt | null) {
    if (!value) {
      this.unset("chain0maxPrice");
    } else {
      this.set("chain0maxPrice", Value.fromBigInt(<BigInt>value));
    }
  }

  get chain1maxPrice(): BigInt | null {
    let value = this.get("chain1maxPrice");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set chain1maxPrice(value: BigInt | null) {
    if (!value) {
      this.unset("chain1maxPrice");
    } else {
      this.set("chain1maxPrice", Value.fromBigInt(<BigInt>value));
    }
  }

  get chain0WithholdingFee(): BigInt | null {
    let value = this.get("chain0WithholdingFee");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set chain0WithholdingFee(value: BigInt | null) {
    if (!value) {
      this.unset("chain0WithholdingFee");
    } else {
      this.set("chain0WithholdingFee", Value.fromBigInt(<BigInt>value));
    }
  }

  get chain1WithholdingFee(): BigInt | null {
    let value = this.get("chain1WithholdingFee");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set chain1WithholdingFee(value: BigInt | null) {
    if (!value) {
      this.unset("chain1WithholdingFee");
    } else {
      this.set("chain1WithholdingFee", Value.fromBigInt(<BigInt>value));
    }
  }

  get chain0TradeFee(): i32 {
    let value = this.get("chain0TradeFee");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set chain0TradeFee(value: i32) {
    this.set("chain0TradeFee", Value.fromI32(value));
  }

  get chain1TradeFee(): i32 {
    let value = this.get("chain1TradeFee");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set chain1TradeFee(value: i32) {
    this.set("chain1TradeFee", Value.fromI32(value));
  }

  get chain0ResponseTime(): i32 {
    let value = this.get("chain0ResponseTime");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set chain0ResponseTime(value: i32) {
    this.set("chain0ResponseTime", Value.fromI32(value));
  }

  get chain1ResponseTime(): i32 {
    let value = this.get("chain1ResponseTime");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set chain1ResponseTime(value: i32) {
    this.set("chain1ResponseTime", Value.fromI32(value));
  }

  get chain0CompensationRatio(): i32 {
    let value = this.get("chain0CompensationRatio");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set chain0CompensationRatio(value: i32) {
    this.set("chain0CompensationRatio", Value.fromI32(value));
  }

  get chain1CompensationRatio(): i32 {
    let value = this.get("chain1CompensationRatio");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set chain1CompensationRatio(value: i32) {
    this.set("chain1CompensationRatio", Value.fromI32(value));
  }

  get enableTimestamp(): BigInt | null {
    let value = this.get("enableTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set enableTimestamp(value: BigInt | null) {
    if (!value) {
      this.unset("enableTimestamp");
    } else {
      this.set("enableTimestamp", Value.fromBigInt(<BigInt>value));
    }
  }

  get latestUpdateTimestamp(): BigInt | null {
    let value = this.get("latestUpdateTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set latestUpdateTimestamp(value: BigInt | null) {
    if (!value) {
      this.unset("latestUpdateTimestamp");
    } else {
      this.set("latestUpdateTimestamp", Value.fromBigInt(<BigInt>value));
    }
  }

  get latestUpdateBlockNumber(): BigInt | null {
    let value = this.get("latestUpdateBlockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set latestUpdateBlockNumber(value: BigInt | null) {
    if (!value) {
      this.unset("latestUpdateBlockNumber");
    } else {
      this.set("latestUpdateBlockNumber", Value.fromBigInt(<BigInt>value));
    }
  }

  get latestUpdateHash(): string | null {
    let value = this.get("latestUpdateHash");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set latestUpdateHash(value: string | null) {
    if (!value) {
      this.unset("latestUpdateHash");
    } else {
      this.set("latestUpdateHash", Value.fromString(<string>value));
    }
  }

  get ruleValidation(): boolean {
    let value = this.get("ruleValidation");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set ruleValidation(value: boolean) {
    this.set("ruleValidation", Value.fromBoolean(value));
  }

  get ruleValidationErrorstatus(): string {
    let value = this.get("ruleValidationErrorstatus");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set ruleValidationErrorstatus(value: string) {
    this.set("ruleValidationErrorstatus", Value.fromString(value));
  }

  get allRulesInfo(): allRulesInfoLoader {
    return new allRulesInfoLoader(
      "sameRuleKeySnapshot",
      this.get("id")!.toString(),
      "allRulesInfo"
    );
  }

  get ruleRel(): ruleRelLoader {
    return new ruleRelLoader(
      "sameRuleKeySnapshot",
      this.get("id")!.toString(),
      "ruleRel"
    );
  }
}

export class chainPairManager extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save chainPairManager entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type chainPairManager must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("chainPairManager", id.toString(), this);
    }
  }

  static loadInBlock(id: string): chainPairManager | null {
    return changetype<chainPairManager | null>(
      store.get_in_block("chainPairManager", id)
    );
  }

  static load(id: string): chainPairManager | null {
    return changetype<chainPairManager | null>(
      store.get("chainPairManager", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get latestRule(): Array<string> {
    let value = this.get("latestRule");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set latestRule(value: Array<string>) {
    this.set("latestRule", Value.fromStringArray(value));
  }

  get latestUpdateHash(): string | null {
    let value = this.get("latestUpdateHash");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set latestUpdateHash(value: string | null) {
    if (!value) {
      this.unset("latestUpdateHash");
    } else {
      this.set("latestUpdateHash", Value.fromString(<string>value));
    }
  }

  get latestUpdateTimestamp(): BigInt | null {
    let value = this.get("latestUpdateTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set latestUpdateTimestamp(value: BigInt | null) {
    if (!value) {
      this.unset("latestUpdateTimestamp");
    } else {
      this.set("latestUpdateTimestamp", Value.fromBigInt(<BigInt>value));
    }
  }

  get latestUpdateBlockNumber(): BigInt | null {
    let value = this.get("latestUpdateBlockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set latestUpdateBlockNumber(value: BigInt | null) {
    if (!value) {
      this.unset("latestUpdateBlockNumber");
    } else {
      this.set("latestUpdateBlockNumber", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class tokenPairManager extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save tokenPairManager entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type tokenPairManager must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("tokenPairManager", id.toString(), this);
    }
  }

  static loadInBlock(id: string): tokenPairManager | null {
    return changetype<tokenPairManager | null>(
      store.get_in_block("tokenPairManager", id)
    );
  }

  static load(id: string): tokenPairManager | null {
    return changetype<tokenPairManager | null>(
      store.get("tokenPairManager", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get latestRule(): Array<string> {
    let value = this.get("latestRule");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set latestRule(value: Array<string>) {
    this.set("latestRule", Value.fromStringArray(value));
  }

  get latestUpdateHash(): string | null {
    let value = this.get("latestUpdateHash");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set latestUpdateHash(value: string | null) {
    if (!value) {
      this.unset("latestUpdateHash");
    } else {
      this.set("latestUpdateHash", Value.fromString(<string>value));
    }
  }

  get latestUpdateTimestamp(): BigInt | null {
    let value = this.get("latestUpdateTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set latestUpdateTimestamp(value: BigInt | null) {
    if (!value) {
      this.unset("latestUpdateTimestamp");
    } else {
      this.set("latestUpdateTimestamp", Value.fromBigInt(<BigInt>value));
    }
  }

  get latestUpdateBlockNumber(): BigInt | null {
    let value = this.get("latestUpdateBlockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set latestUpdateBlockNumber(value: BigInt | null) {
    if (!value) {
      this.unset("latestUpdateBlockNumber");
    } else {
      this.set("latestUpdateBlockNumber", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class mdcLatestColumn extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save mdcLatestColumn entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type mdcLatestColumn must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("mdcLatestColumn", id.toString(), this);
    }
  }

  static loadInBlock(id: string): mdcLatestColumn | null {
    return changetype<mdcLatestColumn | null>(
      store.get_in_block("mdcLatestColumn", id)
    );
  }

  static load(id: string): mdcLatestColumn | null {
    return changetype<mdcLatestColumn | null>(store.get("mdcLatestColumn", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get dealerMapping(): Array<string> {
    let value = this.get("dealerMapping");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set dealerMapping(value: Array<string>) {
    this.set("dealerMapping", Value.fromStringArray(value));
  }

  get ebcMapping(): Array<string> {
    let value = this.get("ebcMapping");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set ebcMapping(value: Array<string>) {
    this.set("ebcMapping", Value.fromStringArray(value));
  }

  get chainIdMapping(): Array<string> {
    let value = this.get("chainIdMapping");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set chainIdMapping(value: Array<string>) {
    this.set("chainIdMapping", Value.fromStringArray(value));
  }

  get latestUpdateHash(): string | null {
    let value = this.get("latestUpdateHash");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set latestUpdateHash(value: string | null) {
    if (!value) {
      this.unset("latestUpdateHash");
    } else {
      this.set("latestUpdateHash", Value.fromString(<string>value));
    }
  }

  get latestUpdateTimestamp(): BigInt | null {
    let value = this.get("latestUpdateTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set latestUpdateTimestamp(value: BigInt | null) {
    if (!value) {
      this.unset("latestUpdateTimestamp");
    } else {
      this.set("latestUpdateTimestamp", Value.fromBigInt(<BigInt>value));
    }
  }

  get latestUpdateBlockNumber(): BigInt | null {
    let value = this.get("latestUpdateBlockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set latestUpdateBlockNumber(value: BigInt | null) {
    if (!value) {
      this.unset("latestUpdateBlockNumber");
    } else {
      this.set("latestUpdateBlockNumber", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class Dealer extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Dealer entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Dealer must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Dealer", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Dealer | null {
    return changetype<Dealer | null>(store.get_in_block("Dealer", id));
  }

  static load(id: string): Dealer | null {
    return changetype<Dealer | null>(store.get("Dealer", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get mdcs(): Array<string> {
    let value = this.get("mdcs");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set mdcs(value: Array<string>) {
    this.set("mdcs", Value.fromStringArray(value));
  }

  get rules(): Array<string> {
    let value = this.get("rules");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set rules(value: Array<string>) {
    this.set("rules", Value.fromStringArray(value));
  }

  get feeRatio(): BigInt {
    let value = this.get("feeRatio");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set feeRatio(value: BigInt) {
    this.set("feeRatio", Value.fromBigInt(value));
  }

  get extraInfo(): string {
    let value = this.get("extraInfo");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set extraInfo(value: string) {
    this.set("extraInfo", Value.fromString(value));
  }

  get register(): boolean {
    let value = this.get("register");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set register(value: boolean) {
    this.set("register", Value.fromBoolean(value));
  }

  get latestUpdateHash(): string {
    let value = this.get("latestUpdateHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set latestUpdateHash(value: string) {
    this.set("latestUpdateHash", Value.fromString(value));
  }

  get latestUpdateTimestamp(): BigInt {
    let value = this.get("latestUpdateTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set latestUpdateTimestamp(value: BigInt) {
    this.set("latestUpdateTimestamp", Value.fromBigInt(value));
  }

  get latestUpdateBlockNumber(): BigInt {
    let value = this.get("latestUpdateBlockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set latestUpdateBlockNumber(value: BigInt) {
    this.set("latestUpdateBlockNumber", Value.fromBigInt(value));
  }
}

export class SubgraphManager extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save SubgraphManager entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type SubgraphManager must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("SubgraphManager", id.toString(), this);
    }
  }

  static loadInBlock(id: string): SubgraphManager | null {
    return changetype<SubgraphManager | null>(
      store.get_in_block("SubgraphManager", id)
    );
  }

  static load(id: string): SubgraphManager | null {
    return changetype<SubgraphManager | null>(store.get("SubgraphManager", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get factory(): Array<string> {
    let value = this.get("factory");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set factory(value: Array<string>) {
    this.set("factory", Value.fromStringArray(value));
  }

  get totalFactory(): i32 {
    let value = this.get("totalFactory");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set totalFactory(value: i32) {
    this.set("totalFactory", Value.fromI32(value));
  }

  get currentFactoryTemplate(): i32 {
    let value = this.get("currentFactoryTemplate");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set currentFactoryTemplate(value: i32) {
    this.set("currentFactoryTemplate", Value.fromI32(value));
  }

  get orManagerenableTimestamp(): BigInt {
    let value = this.get("orManagerenableTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set orManagerenableTimestamp(value: BigInt) {
    this.set("orManagerenableTimestamp", Value.fromBigInt(value));
  }

  get orManagerlatestUpdateHash(): string {
    let value = this.get("orManagerlatestUpdateHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set orManagerlatestUpdateHash(value: string) {
    this.set("orManagerlatestUpdateHash", Value.fromString(value));
  }

  get orManagerlatestUpdateTimestamp(): BigInt {
    let value = this.get("orManagerlatestUpdateTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set orManagerlatestUpdateTimestamp(value: BigInt) {
    this.set("orManagerlatestUpdateTimestamp", Value.fromBigInt(value));
  }

  get orManagerlatestUpdateBlockNumber(): BigInt {
    let value = this.get("orManagerlatestUpdateBlockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set orManagerlatestUpdateBlockNumber(value: BigInt) {
    this.set("orManagerlatestUpdateBlockNumber", Value.fromBigInt(value));
  }
}

export class FactoryManager extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save FactoryManager entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type FactoryManager must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("FactoryManager", id.toString(), this);
    }
  }

  static loadInBlock(id: string): FactoryManager | null {
    return changetype<FactoryManager | null>(
      store.get_in_block("FactoryManager", id)
    );
  }

  static load(id: string): FactoryManager | null {
    return changetype<FactoryManager | null>(store.get("FactoryManager", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get mdcs(): Array<string> {
    let value = this.get("mdcs");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set mdcs(value: Array<string>) {
    this.set("mdcs", Value.fromStringArray(value));
  }

  get owners(): Array<string> {
    let value = this.get("owners");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set owners(value: Array<string>) {
    this.set("owners", Value.fromStringArray(value));
  }

  get responseMakers(): Array<string> {
    let value = this.get("responseMakers");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set responseMakers(value: Array<string>) {
    this.set("responseMakers", Value.fromStringArray(value));
  }

  get mdcCounts(): BigInt {
    let value = this.get("mdcCounts");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set mdcCounts(value: BigInt) {
    this.set("mdcCounts", Value.fromBigInt(value));
  }

  get subgraphManager(): SubgraphManagerLoader {
    return new SubgraphManagerLoader(
      "FactoryManager",
      this.get("id")!.toString(),
      "subgraphManager"
    );
  }
}

export class responseMaker extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save responseMaker entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type responseMaker must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("responseMaker", id.toString(), this);
    }
  }

  static loadInBlock(id: string): responseMaker | null {
    return changetype<responseMaker | null>(
      store.get_in_block("responseMaker", id)
    );
  }

  static load(id: string): responseMaker | null {
    return changetype<responseMaker | null>(store.get("responseMaker", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get mdcs(): Array<string> {
    let value = this.get("mdcs");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set mdcs(value: Array<string>) {
    this.set("mdcs", Value.fromStringArray(value));
  }

  get factory(): FactoryManagerLoader {
    return new FactoryManagerLoader(
      "responseMaker",
      this.get("id")!.toString(),
      "factory"
    );
  }

  get latestUpdateHash(): string {
    let value = this.get("latestUpdateHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set latestUpdateHash(value: string) {
    this.set("latestUpdateHash", Value.fromString(value));
  }

  get latestUpdateTimestamp(): BigInt {
    let value = this.get("latestUpdateTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set latestUpdateTimestamp(value: BigInt) {
    this.set("latestUpdateTimestamp", Value.fromBigInt(value));
  }

  get latestUpdateBlockNumber(): BigInt {
    let value = this.get("latestUpdateBlockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set latestUpdateBlockNumber(value: BigInt) {
    this.set("latestUpdateBlockNumber", Value.fromBigInt(value));
  }
}

export class ebcMapping extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ebcMapping entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ebcMapping must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ebcMapping", id.toString(), this);
    }
  }

  static loadInBlock(id: string): ebcMapping | null {
    return changetype<ebcMapping | null>(store.get_in_block("ebcMapping", id));
  }

  static load(id: string): ebcMapping | null {
    return changetype<ebcMapping | null>(store.get("ebcMapping", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get owner(): string {
    let value = this.get("owner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get ebcAddr(): string {
    let value = this.get("ebcAddr");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set ebcAddr(value: string) {
    this.set("ebcAddr", Value.fromString(value));
  }

  get ebcIndex(): BigInt | null {
    let value = this.get("ebcIndex");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set ebcIndex(value: BigInt | null) {
    if (!value) {
      this.unset("ebcIndex");
    } else {
      this.set("ebcIndex", Value.fromBigInt(<BigInt>value));
    }
  }

  get enableTimestamp(): BigInt | null {
    let value = this.get("enableTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set enableTimestamp(value: BigInt | null) {
    if (!value) {
      this.unset("enableTimestamp");
    } else {
      this.set("enableTimestamp", Value.fromBigInt(<BigInt>value));
    }
  }

  get latestUpdateBlockNumber(): BigInt | null {
    let value = this.get("latestUpdateBlockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set latestUpdateBlockNumber(value: BigInt | null) {
    if (!value) {
      this.unset("latestUpdateBlockNumber");
    } else {
      this.set("latestUpdateBlockNumber", Value.fromBigInt(<BigInt>value));
    }
  }

  get latestUpdateTimestamp(): BigInt | null {
    let value = this.get("latestUpdateTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set latestUpdateTimestamp(value: BigInt | null) {
    if (!value) {
      this.unset("latestUpdateTimestamp");
    } else {
      this.set("latestUpdateTimestamp", Value.fromBigInt(<BigInt>value));
    }
  }

  get latestUpdateHash(): string | null {
    let value = this.get("latestUpdateHash");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set latestUpdateHash(value: string | null) {
    if (!value) {
      this.unset("latestUpdateHash");
    } else {
      this.set("latestUpdateHash", Value.fromString(<string>value));
    }
  }

  get mdcLatestColumn(): mdcLatestColumnLoader {
    return new mdcLatestColumnLoader(
      "ebcMapping",
      this.get("id")!.toString(),
      "mdcLatestColumn"
    );
  }
}

export class ebcMappingSnapshot extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ebcMappingSnapshot entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ebcMappingSnapshot must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ebcMappingSnapshot", id.toString(), this);
    }
  }

  static loadInBlock(id: string): ebcMappingSnapshot | null {
    return changetype<ebcMappingSnapshot | null>(
      store.get_in_block("ebcMappingSnapshot", id)
    );
  }

  static load(id: string): ebcMappingSnapshot | null {
    return changetype<ebcMappingSnapshot | null>(
      store.get("ebcMappingSnapshot", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get owner(): string {
    let value = this.get("owner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get ebcAddr(): string {
    let value = this.get("ebcAddr");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set ebcAddr(value: string) {
    this.set("ebcAddr", Value.fromString(value));
  }

  get ebcIndex(): BigInt | null {
    let value = this.get("ebcIndex");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set ebcIndex(value: BigInt | null) {
    if (!value) {
      this.unset("ebcIndex");
    } else {
      this.set("ebcIndex", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class currBoundSpvInfo extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save currBoundSpvInfo entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type currBoundSpvInfo must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("currBoundSpvInfo", id.toString(), this);
    }
  }

  static loadInBlock(id: string): currBoundSpvInfo | null {
    return changetype<currBoundSpvInfo | null>(
      store.get_in_block("currBoundSpvInfo", id)
    );
  }

  static load(id: string): currBoundSpvInfo | null {
    return changetype<currBoundSpvInfo | null>(
      store.get("currBoundSpvInfo", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get chainId(): BigInt | null {
    let value = this.get("chainId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set chainId(value: BigInt | null) {
    if (!value) {
      this.unset("chainId");
    } else {
      this.set("chainId", Value.fromBigInt(<BigInt>value));
    }
  }

  get spv(): string | null {
    let value = this.get("spv");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set spv(value: string | null) {
    if (!value) {
      this.unset("spv");
    } else {
      this.set("spv", Value.fromString(<string>value));
    }
  }

  get enableTimestamp(): BigInt | null {
    let value = this.get("enableTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set enableTimestamp(value: BigInt | null) {
    if (!value) {
      this.unset("enableTimestamp");
    } else {
      this.set("enableTimestamp", Value.fromBigInt(<BigInt>value));
    }
  }

  get mdc(): MDCLoader {
    return new MDCLoader("currBoundSpvInfo", this.get("id")!.toString(), "mdc");
  }
}

export class DealerMapping extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DealerMapping entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type DealerMapping must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("DealerMapping", id.toString(), this);
    }
  }

  static loadInBlock(id: string): DealerMapping | null {
    return changetype<DealerMapping | null>(
      store.get_in_block("DealerMapping", id)
    );
  }

  static load(id: string): DealerMapping | null {
    return changetype<DealerMapping | null>(store.get("DealerMapping", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get owner(): string {
    let value = this.get("owner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get dealerAddr(): string {
    let value = this.get("dealerAddr");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set dealerAddr(value: string) {
    this.set("dealerAddr", Value.fromString(value));
  }

  get dealerIndex(): BigInt | null {
    let value = this.get("dealerIndex");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set dealerIndex(value: BigInt | null) {
    if (!value) {
      this.unset("dealerIndex");
    } else {
      this.set("dealerIndex", Value.fromBigInt(<BigInt>value));
    }
  }

  get enableTimestamp(): BigInt | null {
    let value = this.get("enableTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set enableTimestamp(value: BigInt | null) {
    if (!value) {
      this.unset("enableTimestamp");
    } else {
      this.set("enableTimestamp", Value.fromBigInt(<BigInt>value));
    }
  }

  get latestUpdateBlockNumber(): BigInt | null {
    let value = this.get("latestUpdateBlockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set latestUpdateBlockNumber(value: BigInt | null) {
    if (!value) {
      this.unset("latestUpdateBlockNumber");
    } else {
      this.set("latestUpdateBlockNumber", Value.fromBigInt(<BigInt>value));
    }
  }

  get latestUpdateTimestamp(): BigInt | null {
    let value = this.get("latestUpdateTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set latestUpdateTimestamp(value: BigInt | null) {
    if (!value) {
      this.unset("latestUpdateTimestamp");
    } else {
      this.set("latestUpdateTimestamp", Value.fromBigInt(<BigInt>value));
    }
  }

  get latestUpdateHash(): string | null {
    let value = this.get("latestUpdateHash");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set latestUpdateHash(value: string | null) {
    if (!value) {
      this.unset("latestUpdateHash");
    } else {
      this.set("latestUpdateHash", Value.fromString(<string>value));
    }
  }

  get mdcLatestColumn(): mdcLatestColumnLoader {
    return new mdcLatestColumnLoader(
      "DealerMapping",
      this.get("id")!.toString(),
      "mdcLatestColumn"
    );
  }
}

export class dealerMappingSnapshot extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save dealerMappingSnapshot entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type dealerMappingSnapshot must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("dealerMappingSnapshot", id.toString(), this);
    }
  }

  static loadInBlock(id: string): dealerMappingSnapshot | null {
    return changetype<dealerMappingSnapshot | null>(
      store.get_in_block("dealerMappingSnapshot", id)
    );
  }

  static load(id: string): dealerMappingSnapshot | null {
    return changetype<dealerMappingSnapshot | null>(
      store.get("dealerMappingSnapshot", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get owner(): string {
    let value = this.get("owner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get dealerAddr(): string {
    let value = this.get("dealerAddr");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set dealerAddr(value: string) {
    this.set("dealerAddr", Value.fromString(value));
  }

  get dealerIndex(): BigInt | null {
    let value = this.get("dealerIndex");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set dealerIndex(value: BigInt | null) {
    if (!value) {
      this.unset("dealerIndex");
    } else {
      this.set("dealerIndex", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class chainIdMapping extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save chainIdMapping entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type chainIdMapping must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("chainIdMapping", id.toString(), this);
    }
  }

  static loadInBlock(id: string): chainIdMapping | null {
    return changetype<chainIdMapping | null>(
      store.get_in_block("chainIdMapping", id)
    );
  }

  static load(id: string): chainIdMapping | null {
    return changetype<chainIdMapping | null>(store.get("chainIdMapping", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get owner(): string {
    let value = this.get("owner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get chainId(): BigInt {
    let value = this.get("chainId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set chainId(value: BigInt) {
    this.set("chainId", Value.fromBigInt(value));
  }

  get chainIdIndex(): BigInt | null {
    let value = this.get("chainIdIndex");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set chainIdIndex(value: BigInt | null) {
    if (!value) {
      this.unset("chainIdIndex");
    } else {
      this.set("chainIdIndex", Value.fromBigInt(<BigInt>value));
    }
  }

  get enableTimestamp(): BigInt | null {
    let value = this.get("enableTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set enableTimestamp(value: BigInt | null) {
    if (!value) {
      this.unset("enableTimestamp");
    } else {
      this.set("enableTimestamp", Value.fromBigInt(<BigInt>value));
    }
  }

  get latestUpdateBlockNumber(): BigInt | null {
    let value = this.get("latestUpdateBlockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set latestUpdateBlockNumber(value: BigInt | null) {
    if (!value) {
      this.unset("latestUpdateBlockNumber");
    } else {
      this.set("latestUpdateBlockNumber", Value.fromBigInt(<BigInt>value));
    }
  }

  get latestUpdateTimestamp(): BigInt | null {
    let value = this.get("latestUpdateTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set latestUpdateTimestamp(value: BigInt | null) {
    if (!value) {
      this.unset("latestUpdateTimestamp");
    } else {
      this.set("latestUpdateTimestamp", Value.fromBigInt(<BigInt>value));
    }
  }

  get latestUpdateHash(): string | null {
    let value = this.get("latestUpdateHash");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set latestUpdateHash(value: string | null) {
    if (!value) {
      this.unset("latestUpdateHash");
    } else {
      this.set("latestUpdateHash", Value.fromString(<string>value));
    }
  }
}

export class chainIdMappingSnapshot extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save chainIdMappingSnapshot entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type chainIdMappingSnapshot must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("chainIdMappingSnapshot", id.toString(), this);
    }
  }

  static loadInBlock(id: string): chainIdMappingSnapshot | null {
    return changetype<chainIdMappingSnapshot | null>(
      store.get_in_block("chainIdMappingSnapshot", id)
    );
  }

  static load(id: string): chainIdMappingSnapshot | null {
    return changetype<chainIdMappingSnapshot | null>(
      store.get("chainIdMappingSnapshot", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get owner(): string {
    let value = this.get("owner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get chainId(): BigInt {
    let value = this.get("chainId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set chainId(value: BigInt) {
    this.set("chainId", Value.fromBigInt(value));
  }

  get chainIdIndex(): BigInt | null {
    let value = this.get("chainIdIndex");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set chainIdIndex(value: BigInt | null) {
    if (!value) {
      this.unset("chainIdIndex");
    } else {
      this.set("chainIdIndex", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class ruleRel extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ruleRel entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ruleRel must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ruleRel", id.toString(), this);
    }
  }

  static loadInBlock(id: string): ruleRel | null {
    return changetype<ruleRel | null>(store.get_in_block("ruleRel", id));
  }

  static load(id: string): ruleRel | null {
    return changetype<ruleRel | null>(store.get("ruleRel", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get type(): string {
    let value = this.get("type");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set type(value: string) {
    this.set("type", Value.fromString(value));
  }

  get ruleLatest(): Array<string> {
    let value = this.get("ruleLatest");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set ruleLatest(value: Array<string>) {
    this.set("ruleLatest", Value.fromStringArray(value));
  }

  get root(): string {
    let value = this.get("root");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set root(value: string) {
    this.set("root", Value.fromString(value));
  }

  get version(): i32 {
    let value = this.get("version");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set version(value: i32) {
    this.set("version", Value.fromI32(value));
  }

  get sourceChainIds(): Array<BigInt> {
    let value = this.get("sourceChainIds");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigIntArray();
    }
  }

  set sourceChainIds(value: Array<BigInt>) {
    this.set("sourceChainIds", Value.fromBigIntArray(value));
  }

  get pledgeAmounts(): Array<BigInt> {
    let value = this.get("pledgeAmounts");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigIntArray();
    }
  }

  set pledgeAmounts(value: Array<BigInt>) {
    this.set("pledgeAmounts", Value.fromBigIntArray(value));
  }

  get token(): string {
    let value = this.get("token");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get sameRuleKeySnapshot(): Array<string> {
    let value = this.get("sameRuleKeySnapshot");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set sameRuleKeySnapshot(value: Array<string>) {
    this.set("sameRuleKeySnapshot", Value.fromStringArray(value));
  }

  get ebc(): ebcRelLoader {
    return new ebcRelLoader("ruleRel", this.get("id")!.toString(), "ebc");
  }

  get latestUpdateHash(): string | null {
    let value = this.get("latestUpdateHash");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set latestUpdateHash(value: string | null) {
    if (!value) {
      this.unset("latestUpdateHash");
    } else {
      this.set("latestUpdateHash", Value.fromString(<string>value));
    }
  }

  get latestUpdateTimestamp(): BigInt | null {
    let value = this.get("latestUpdateTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set latestUpdateTimestamp(value: BigInt | null) {
    if (!value) {
      this.unset("latestUpdateTimestamp");
    } else {
      this.set("latestUpdateTimestamp", Value.fromBigInt(<BigInt>value));
    }
  }

  get latestUpdateBlockNumber(): BigInt | null {
    let value = this.get("latestUpdateBlockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set latestUpdateBlockNumber(value: BigInt | null) {
    if (!value) {
      this.unset("latestUpdateBlockNumber");
    } else {
      this.set("latestUpdateBlockNumber", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class latestRule extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save latestRule entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type latestRule must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("latestRule", id.toString(), this);
    }
  }

  static loadInBlock(id: string): latestRule | null {
    return changetype<latestRule | null>(store.get_in_block("latestRule", id));
  }

  static load(id: string): latestRule | null {
    return changetype<latestRule | null>(store.get("latestRule", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get owner(): string {
    let value = this.get("owner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get mdcAddr(): string {
    let value = this.get("mdcAddr");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set mdcAddr(value: string) {
    this.set("mdcAddr", Value.fromString(value));
  }

  get ebcAddr(): string {
    let value = this.get("ebcAddr");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set ebcAddr(value: string) {
    this.set("ebcAddr", Value.fromString(value));
  }

  get ruleKey(): string | null {
    let value = this.get("ruleKey");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set ruleKey(value: string | null) {
    if (!value) {
      this.unset("ruleKey");
    } else {
      this.set("ruleKey", Value.fromString(<string>value));
    }
  }

  get type(): string | null {
    let value = this.get("type");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set type(value: string | null) {
    if (!value) {
      this.unset("type");
    } else {
      this.set("type", Value.fromString(<string>value));
    }
  }

  get chain0(): BigInt {
    let value = this.get("chain0");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set chain0(value: BigInt) {
    this.set("chain0", Value.fromBigInt(value));
  }

  get chain1(): BigInt {
    let value = this.get("chain1");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set chain1(value: BigInt) {
    this.set("chain1", Value.fromBigInt(value));
  }

  get chain0Status(): i32 {
    let value = this.get("chain0Status");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set chain0Status(value: i32) {
    this.set("chain0Status", Value.fromI32(value));
  }

  get chain1Status(): i32 {
    let value = this.get("chain1Status");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set chain1Status(value: i32) {
    this.set("chain1Status", Value.fromI32(value));
  }

  get chain0Token(): string {
    let value = this.get("chain0Token");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set chain0Token(value: string) {
    this.set("chain0Token", Value.fromString(value));
  }

  get chain1Token(): string {
    let value = this.get("chain1Token");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set chain1Token(value: string) {
    this.set("chain1Token", Value.fromString(value));
  }

  get chain0minPrice(): BigInt | null {
    let value = this.get("chain0minPrice");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set chain0minPrice(value: BigInt | null) {
    if (!value) {
      this.unset("chain0minPrice");
    } else {
      this.set("chain0minPrice", Value.fromBigInt(<BigInt>value));
    }
  }

  get chain1minPrice(): BigInt | null {
    let value = this.get("chain1minPrice");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set chain1minPrice(value: BigInt | null) {
    if (!value) {
      this.unset("chain1minPrice");
    } else {
      this.set("chain1minPrice", Value.fromBigInt(<BigInt>value));
    }
  }

  get chain0maxPrice(): BigInt | null {
    let value = this.get("chain0maxPrice");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set chain0maxPrice(value: BigInt | null) {
    if (!value) {
      this.unset("chain0maxPrice");
    } else {
      this.set("chain0maxPrice", Value.fromBigInt(<BigInt>value));
    }
  }

  get chain1maxPrice(): BigInt | null {
    let value = this.get("chain1maxPrice");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set chain1maxPrice(value: BigInt | null) {
    if (!value) {
      this.unset("chain1maxPrice");
    } else {
      this.set("chain1maxPrice", Value.fromBigInt(<BigInt>value));
    }
  }

  get chain0WithholdingFee(): BigInt | null {
    let value = this.get("chain0WithholdingFee");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set chain0WithholdingFee(value: BigInt | null) {
    if (!value) {
      this.unset("chain0WithholdingFee");
    } else {
      this.set("chain0WithholdingFee", Value.fromBigInt(<BigInt>value));
    }
  }

  get chain1WithholdingFee(): BigInt | null {
    let value = this.get("chain1WithholdingFee");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set chain1WithholdingFee(value: BigInt | null) {
    if (!value) {
      this.unset("chain1WithholdingFee");
    } else {
      this.set("chain1WithholdingFee", Value.fromBigInt(<BigInt>value));
    }
  }

  get chain0TradeFee(): i32 {
    let value = this.get("chain0TradeFee");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set chain0TradeFee(value: i32) {
    this.set("chain0TradeFee", Value.fromI32(value));
  }

  get chain1TradeFee(): i32 {
    let value = this.get("chain1TradeFee");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set chain1TradeFee(value: i32) {
    this.set("chain1TradeFee", Value.fromI32(value));
  }

  get chain0ResponseTime(): i32 {
    let value = this.get("chain0ResponseTime");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set chain0ResponseTime(value: i32) {
    this.set("chain0ResponseTime", Value.fromI32(value));
  }

  get chain1ResponseTime(): i32 {
    let value = this.get("chain1ResponseTime");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set chain1ResponseTime(value: i32) {
    this.set("chain1ResponseTime", Value.fromI32(value));
  }

  get chain0CompensationRatio(): i32 {
    let value = this.get("chain0CompensationRatio");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set chain0CompensationRatio(value: i32) {
    this.set("chain0CompensationRatio", Value.fromI32(value));
  }

  get chain1CompensationRatio(): i32 {
    let value = this.get("chain1CompensationRatio");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set chain1CompensationRatio(value: i32) {
    this.set("chain1CompensationRatio", Value.fromI32(value));
  }

  get enableTimestamp(): BigInt | null {
    let value = this.get("enableTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set enableTimestamp(value: BigInt | null) {
    if (!value) {
      this.unset("enableTimestamp");
    } else {
      this.set("enableTimestamp", Value.fromBigInt(<BigInt>value));
    }
  }

  get latestUpdateVersion(): i32 {
    let value = this.get("latestUpdateVersion");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set latestUpdateVersion(value: i32) {
    this.set("latestUpdateVersion", Value.fromI32(value));
  }

  get latestUpdateTimestamp(): BigInt | null {
    let value = this.get("latestUpdateTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set latestUpdateTimestamp(value: BigInt | null) {
    if (!value) {
      this.unset("latestUpdateTimestamp");
    } else {
      this.set("latestUpdateTimestamp", Value.fromBigInt(<BigInt>value));
    }
  }

  get latestUpdateBlockNumber(): BigInt | null {
    let value = this.get("latestUpdateBlockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set latestUpdateBlockNumber(value: BigInt | null) {
    if (!value) {
      this.unset("latestUpdateBlockNumber");
    } else {
      this.set("latestUpdateBlockNumber", Value.fromBigInt(<BigInt>value));
    }
  }

  get latestUpdateHash(): string | null {
    let value = this.get("latestUpdateHash");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set latestUpdateHash(value: string | null) {
    if (!value) {
      this.unset("latestUpdateHash");
    } else {
      this.set("latestUpdateHash", Value.fromString(<string>value));
    }
  }

  get ruleValidation(): boolean {
    let value = this.get("ruleValidation");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set ruleValidation(value: boolean) {
    this.set("ruleValidation", Value.fromBoolean(value));
  }

  get ruleValidationErrorstatus(): string {
    let value = this.get("ruleValidationErrorstatus");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set ruleValidationErrorstatus(value: string) {
    this.set("ruleValidationErrorstatus", Value.fromString(value));
  }

  get root(): string {
    let value = this.get("root");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set root(value: string) {
    this.set("root", Value.fromString(value));
  }

  get latestSnapShotID(): string {
    let value = this.get("latestSnapShotID");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set latestSnapShotID(value: string) {
    this.set("latestSnapShotID", Value.fromString(value));
  }

  get ebc(): ebcRelLoader {
    return new ebcRelLoader("latestRule", this.get("id")!.toString(), "ebc");
  }

  get chainPairManager(): chainPairManagerLoader {
    return new chainPairManagerLoader(
      "latestRule",
      this.get("id")!.toString(),
      "chainPairManager"
    );
  }

  get tokenPairManager(): tokenPairManagerLoader {
    return new tokenPairManagerLoader(
      "latestRule",
      this.get("id")!.toString(),
      "tokenPairManager"
    );
  }
}

export class latestRuleSnapshot extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save latestRuleSnapshot entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type latestRuleSnapshot must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("latestRuleSnapshot", id.toString(), this);
    }
  }

  static loadInBlock(id: string): latestRuleSnapshot | null {
    return changetype<latestRuleSnapshot | null>(
      store.get_in_block("latestRuleSnapshot", id)
    );
  }

  static load(id: string): latestRuleSnapshot | null {
    return changetype<latestRuleSnapshot | null>(
      store.get("latestRuleSnapshot", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get owner(): string {
    let value = this.get("owner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get mdcAddr(): string {
    let value = this.get("mdcAddr");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set mdcAddr(value: string) {
    this.set("mdcAddr", Value.fromString(value));
  }

  get ebcAddr(): string {
    let value = this.get("ebcAddr");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set ebcAddr(value: string) {
    this.set("ebcAddr", Value.fromString(value));
  }

  get ruleKey(): string | null {
    let value = this.get("ruleKey");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set ruleKey(value: string | null) {
    if (!value) {
      this.unset("ruleKey");
    } else {
      this.set("ruleKey", Value.fromString(<string>value));
    }
  }

  get type(): string | null {
    let value = this.get("type");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set type(value: string | null) {
    if (!value) {
      this.unset("type");
    } else {
      this.set("type", Value.fromString(<string>value));
    }
  }

  get chain0(): BigInt {
    let value = this.get("chain0");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set chain0(value: BigInt) {
    this.set("chain0", Value.fromBigInt(value));
  }

  get chain1(): BigInt {
    let value = this.get("chain1");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set chain1(value: BigInt) {
    this.set("chain1", Value.fromBigInt(value));
  }

  get chain0Status(): i32 {
    let value = this.get("chain0Status");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set chain0Status(value: i32) {
    this.set("chain0Status", Value.fromI32(value));
  }

  get chain1Status(): i32 {
    let value = this.get("chain1Status");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set chain1Status(value: i32) {
    this.set("chain1Status", Value.fromI32(value));
  }

  get chain0Token(): string {
    let value = this.get("chain0Token");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set chain0Token(value: string) {
    this.set("chain0Token", Value.fromString(value));
  }

  get chain1Token(): string {
    let value = this.get("chain1Token");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set chain1Token(value: string) {
    this.set("chain1Token", Value.fromString(value));
  }

  get chain0minPrice(): BigInt | null {
    let value = this.get("chain0minPrice");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set chain0minPrice(value: BigInt | null) {
    if (!value) {
      this.unset("chain0minPrice");
    } else {
      this.set("chain0minPrice", Value.fromBigInt(<BigInt>value));
    }
  }

  get chain1minPrice(): BigInt | null {
    let value = this.get("chain1minPrice");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set chain1minPrice(value: BigInt | null) {
    if (!value) {
      this.unset("chain1minPrice");
    } else {
      this.set("chain1minPrice", Value.fromBigInt(<BigInt>value));
    }
  }

  get chain0maxPrice(): BigInt | null {
    let value = this.get("chain0maxPrice");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set chain0maxPrice(value: BigInt | null) {
    if (!value) {
      this.unset("chain0maxPrice");
    } else {
      this.set("chain0maxPrice", Value.fromBigInt(<BigInt>value));
    }
  }

  get chain1maxPrice(): BigInt | null {
    let value = this.get("chain1maxPrice");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set chain1maxPrice(value: BigInt | null) {
    if (!value) {
      this.unset("chain1maxPrice");
    } else {
      this.set("chain1maxPrice", Value.fromBigInt(<BigInt>value));
    }
  }

  get chain0WithholdingFee(): BigInt | null {
    let value = this.get("chain0WithholdingFee");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set chain0WithholdingFee(value: BigInt | null) {
    if (!value) {
      this.unset("chain0WithholdingFee");
    } else {
      this.set("chain0WithholdingFee", Value.fromBigInt(<BigInt>value));
    }
  }

  get chain1WithholdingFee(): BigInt | null {
    let value = this.get("chain1WithholdingFee");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set chain1WithholdingFee(value: BigInt | null) {
    if (!value) {
      this.unset("chain1WithholdingFee");
    } else {
      this.set("chain1WithholdingFee", Value.fromBigInt(<BigInt>value));
    }
  }

  get chain0TradeFee(): i32 {
    let value = this.get("chain0TradeFee");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set chain0TradeFee(value: i32) {
    this.set("chain0TradeFee", Value.fromI32(value));
  }

  get chain1TradeFee(): i32 {
    let value = this.get("chain1TradeFee");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set chain1TradeFee(value: i32) {
    this.set("chain1TradeFee", Value.fromI32(value));
  }

  get chain0ResponseTime(): i32 {
    let value = this.get("chain0ResponseTime");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set chain0ResponseTime(value: i32) {
    this.set("chain0ResponseTime", Value.fromI32(value));
  }

  get chain1ResponseTime(): i32 {
    let value = this.get("chain1ResponseTime");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set chain1ResponseTime(value: i32) {
    this.set("chain1ResponseTime", Value.fromI32(value));
  }

  get chain0CompensationRatio(): i32 {
    let value = this.get("chain0CompensationRatio");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set chain0CompensationRatio(value: i32) {
    this.set("chain0CompensationRatio", Value.fromI32(value));
  }

  get chain1CompensationRatio(): i32 {
    let value = this.get("chain1CompensationRatio");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set chain1CompensationRatio(value: i32) {
    this.set("chain1CompensationRatio", Value.fromI32(value));
  }

  get enableTimestamp(): BigInt | null {
    let value = this.get("enableTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set enableTimestamp(value: BigInt | null) {
    if (!value) {
      this.unset("enableTimestamp");
    } else {
      this.set("enableTimestamp", Value.fromBigInt(<BigInt>value));
    }
  }

  get enableBlockNumber(): BigInt | null {
    let value = this.get("enableBlockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set enableBlockNumber(value: BigInt | null) {
    if (!value) {
      this.unset("enableBlockNumber");
    } else {
      this.set("enableBlockNumber", Value.fromBigInt(<BigInt>value));
    }
  }

  get latestUpdateVersion(): i32 {
    let value = this.get("latestUpdateVersion");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set latestUpdateVersion(value: i32) {
    this.set("latestUpdateVersion", Value.fromI32(value));
  }

  get latestUpdateTimestamp(): BigInt | null {
    let value = this.get("latestUpdateTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set latestUpdateTimestamp(value: BigInt | null) {
    if (!value) {
      this.unset("latestUpdateTimestamp");
    } else {
      this.set("latestUpdateTimestamp", Value.fromBigInt(<BigInt>value));
    }
  }

  get latestUpdateBlockNumber(): BigInt | null {
    let value = this.get("latestUpdateBlockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set latestUpdateBlockNumber(value: BigInt | null) {
    if (!value) {
      this.unset("latestUpdateBlockNumber");
    } else {
      this.set("latestUpdateBlockNumber", Value.fromBigInt(<BigInt>value));
    }
  }

  get latestUpdateHash(): string | null {
    let value = this.get("latestUpdateHash");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set latestUpdateHash(value: string | null) {
    if (!value) {
      this.unset("latestUpdateHash");
    } else {
      this.set("latestUpdateHash", Value.fromString(<string>value));
    }
  }

  get ruleValidation(): boolean {
    let value = this.get("ruleValidation");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set ruleValidation(value: boolean) {
    this.set("ruleValidation", Value.fromBoolean(value));
  }

  get ruleValidationErrorstatus(): string {
    let value = this.get("ruleValidationErrorstatus");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set ruleValidationErrorstatus(value: string) {
    this.set("ruleValidationErrorstatus", Value.fromString(value));
  }

  get ruleRelSnapshot(): ruleRelLoader {
    return new ruleRelLoader(
      "latestRuleSnapshot",
      this.get("id")!.toString(),
      "ruleRelSnapshot"
    );
  }
}

export class chainRel extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save chainRel entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type chainRel must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("chainRel", id.toString(), this);
    }
  }

  static loadInBlock(id: string): chainRel | null {
    return changetype<chainRel | null>(store.get_in_block("chainRel", id));
  }

  static load(id: string): chainRel | null {
    return changetype<chainRel | null>(store.get("chainRel", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokens(): Array<string> {
    let value = this.get("tokens");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set tokens(value: Array<string>) {
    this.set("tokens", Value.fromStringArray(value));
  }

  get spvs(): Array<string> {
    let value = this.get("spvs");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set spvs(value: Array<string>) {
    this.set("spvs", Value.fromStringArray(value));
  }

  get nativeToken(): string {
    let value = this.get("nativeToken");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set nativeToken(value: string) {
    this.set("nativeToken", Value.fromString(value));
  }

  get batchLimit(): BigInt | null {
    let value = this.get("batchLimit");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set batchLimit(value: BigInt | null) {
    if (!value) {
      this.unset("batchLimit");
    } else {
      this.set("batchLimit", Value.fromBigInt(<BigInt>value));
    }
  }

  get minVerifyChallengeSourceTxSecond(): BigInt | null {
    let value = this.get("minVerifyChallengeSourceTxSecond");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set minVerifyChallengeSourceTxSecond(value: BigInt | null) {
    if (!value) {
      this.unset("minVerifyChallengeSourceTxSecond");
    } else {
      this.set(
        "minVerifyChallengeSourceTxSecond",
        Value.fromBigInt(<BigInt>value)
      );
    }
  }

  get maxVerifyChallengeSourceTxSecond(): BigInt | null {
    let value = this.get("maxVerifyChallengeSourceTxSecond");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set maxVerifyChallengeSourceTxSecond(value: BigInt | null) {
    if (!value) {
      this.unset("maxVerifyChallengeSourceTxSecond");
    } else {
      this.set(
        "maxVerifyChallengeSourceTxSecond",
        Value.fromBigInt(<BigInt>value)
      );
    }
  }

  get minVerifyChallengeDestTxSecond(): BigInt | null {
    let value = this.get("minVerifyChallengeDestTxSecond");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set minVerifyChallengeDestTxSecond(value: BigInt | null) {
    if (!value) {
      this.unset("minVerifyChallengeDestTxSecond");
    } else {
      this.set(
        "minVerifyChallengeDestTxSecond",
        Value.fromBigInt(<BigInt>value)
      );
    }
  }

  get maxVerifyChallengeDestTxSecond(): BigInt | null {
    let value = this.get("maxVerifyChallengeDestTxSecond");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set maxVerifyChallengeDestTxSecond(value: BigInt | null) {
    if (!value) {
      this.unset("maxVerifyChallengeDestTxSecond");
    } else {
      this.set(
        "maxVerifyChallengeDestTxSecond",
        Value.fromBigInt(<BigInt>value)
      );
    }
  }

  get enableTimestamp(): BigInt | null {
    let value = this.get("enableTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set enableTimestamp(value: BigInt | null) {
    if (!value) {
      this.unset("enableTimestamp");
    } else {
      this.set("enableTimestamp", Value.fromBigInt(<BigInt>value));
    }
  }

  get latestUpdateBlockNumber(): BigInt {
    let value = this.get("latestUpdateBlockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set latestUpdateBlockNumber(value: BigInt) {
    this.set("latestUpdateBlockNumber", Value.fromBigInt(value));
  }

  get latestUpdateTimestamp(): BigInt {
    let value = this.get("latestUpdateTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set latestUpdateTimestamp(value: BigInt) {
    this.set("latestUpdateTimestamp", Value.fromBigInt(value));
  }

  get latestUpdateHash(): string {
    let value = this.get("latestUpdateHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set latestUpdateHash(value: string) {
    this.set("latestUpdateHash", Value.fromString(value));
  }
}

export class tokenRel extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save tokenRel entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type tokenRel must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("tokenRel", id.toString(), this);
    }
  }

  static loadInBlock(id: string): tokenRel | null {
    return changetype<tokenRel | null>(store.get_in_block("tokenRel", id));
  }

  static load(id: string): tokenRel | null {
    return changetype<tokenRel | null>(store.get("tokenRel", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokenAddress(): string {
    let value = this.get("tokenAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set tokenAddress(value: string) {
    this.set("tokenAddress", Value.fromString(value));
  }

  get chainId(): string {
    let value = this.get("chainId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set chainId(value: string) {
    this.set("chainId", Value.fromString(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get mainnetToken(): string | null {
    let value = this.get("mainnetToken");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set mainnetToken(value: string | null) {
    if (!value) {
      this.unset("mainnetToken");
    } else {
      this.set("mainnetToken", Value.fromString(<string>value));
    }
  }

  get decimals(): i32 {
    let value = this.get("decimals");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set decimals(value: i32) {
    this.set("decimals", Value.fromI32(value));
  }

  get chain(): chainRelLoader {
    return new chainRelLoader("tokenRel", this.get("id")!.toString(), "chain");
  }

  get latestUpdateBlockNumber(): BigInt {
    let value = this.get("latestUpdateBlockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set latestUpdateBlockNumber(value: BigInt) {
    this.set("latestUpdateBlockNumber", Value.fromBigInt(value));
  }

  get latestUpdateTimestamp(): BigInt {
    let value = this.get("latestUpdateTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set latestUpdateTimestamp(value: BigInt) {
    this.set("latestUpdateTimestamp", Value.fromBigInt(value));
  }

  get latestUpdateHash(): string {
    let value = this.get("latestUpdateHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set latestUpdateHash(value: string) {
    this.set("latestUpdateHash", Value.fromString(value));
  }
}

export class chainRelSnapshot extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save chainRelSnapshot entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type chainRelSnapshot must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("chainRelSnapshot", id.toString(), this);
    }
  }

  static loadInBlock(id: string): chainRelSnapshot | null {
    return changetype<chainRelSnapshot | null>(
      store.get_in_block("chainRelSnapshot", id)
    );
  }

  static load(id: string): chainRelSnapshot | null {
    return changetype<chainRelSnapshot | null>(
      store.get("chainRelSnapshot", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get chainId(): string {
    let value = this.get("chainId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set chainId(value: string) {
    this.set("chainId", Value.fromString(value));
  }

  get spvs(): Array<string> {
    let value = this.get("spvs");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set spvs(value: Array<string>) {
    this.set("spvs", Value.fromStringArray(value));
  }

  get nativeToken(): string {
    let value = this.get("nativeToken");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set nativeToken(value: string) {
    this.set("nativeToken", Value.fromString(value));
  }

  get batchLimit(): BigInt | null {
    let value = this.get("batchLimit");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set batchLimit(value: BigInt | null) {
    if (!value) {
      this.unset("batchLimit");
    } else {
      this.set("batchLimit", Value.fromBigInt(<BigInt>value));
    }
  }

  get minVerifyChallengeSourceTxSecond(): BigInt | null {
    let value = this.get("minVerifyChallengeSourceTxSecond");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set minVerifyChallengeSourceTxSecond(value: BigInt | null) {
    if (!value) {
      this.unset("minVerifyChallengeSourceTxSecond");
    } else {
      this.set(
        "minVerifyChallengeSourceTxSecond",
        Value.fromBigInt(<BigInt>value)
      );
    }
  }

  get maxVerifyChallengeSourceTxSecond(): BigInt | null {
    let value = this.get("maxVerifyChallengeSourceTxSecond");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set maxVerifyChallengeSourceTxSecond(value: BigInt | null) {
    if (!value) {
      this.unset("maxVerifyChallengeSourceTxSecond");
    } else {
      this.set(
        "maxVerifyChallengeSourceTxSecond",
        Value.fromBigInt(<BigInt>value)
      );
    }
  }

  get minVerifyChallengeDestTxSecond(): BigInt | null {
    let value = this.get("minVerifyChallengeDestTxSecond");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set minVerifyChallengeDestTxSecond(value: BigInt | null) {
    if (!value) {
      this.unset("minVerifyChallengeDestTxSecond");
    } else {
      this.set(
        "minVerifyChallengeDestTxSecond",
        Value.fromBigInt(<BigInt>value)
      );
    }
  }

  get maxVerifyChallengeDestTxSecond(): BigInt | null {
    let value = this.get("maxVerifyChallengeDestTxSecond");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set maxVerifyChallengeDestTxSecond(value: BigInt | null) {
    if (!value) {
      this.unset("maxVerifyChallengeDestTxSecond");
    } else {
      this.set(
        "maxVerifyChallengeDestTxSecond",
        Value.fromBigInt(<BigInt>value)
      );
    }
  }

  get enableTimestamp(): BigInt | null {
    let value = this.get("enableTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set enableTimestamp(value: BigInt | null) {
    if (!value) {
      this.unset("enableTimestamp");
    } else {
      this.set("enableTimestamp", Value.fromBigInt(<BigInt>value));
    }
  }

  get latestUpdateBlockNumber(): BigInt {
    let value = this.get("latestUpdateBlockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set latestUpdateBlockNumber(value: BigInt) {
    this.set("latestUpdateBlockNumber", Value.fromBigInt(value));
  }

  get latestUpdateTimestamp(): BigInt {
    let value = this.get("latestUpdateTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set latestUpdateTimestamp(value: BigInt) {
    this.set("latestUpdateTimestamp", Value.fromBigInt(value));
  }

  get latestUpdateHash(): string {
    let value = this.get("latestUpdateHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set latestUpdateHash(value: string) {
    this.set("latestUpdateHash", Value.fromString(value));
  }
}

export class challengeUserRatioSnapshot extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save challengeUserRatioSnapshot entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type challengeUserRatioSnapshot must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("challengeUserRatioSnapshot", id.toString(), this);
    }
  }

  static loadInBlock(id: string): challengeUserRatioSnapshot | null {
    return changetype<challengeUserRatioSnapshot | null>(
      store.get_in_block("challengeUserRatioSnapshot", id)
    );
  }

  static load(id: string): challengeUserRatioSnapshot | null {
    return changetype<challengeUserRatioSnapshot | null>(
      store.get("challengeUserRatioSnapshot", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get orManagerAddress(): string {
    let value = this.get("orManagerAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set orManagerAddress(value: string) {
    this.set("orManagerAddress", Value.fromString(value));
  }

  get challengeUserRatio(): BigInt {
    let value = this.get("challengeUserRatio");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set challengeUserRatio(value: BigInt) {
    this.set("challengeUserRatio", Value.fromBigInt(value));
  }

  get enableTimestamp(): BigInt {
    let value = this.get("enableTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set enableTimestamp(value: BigInt) {
    this.set("enableTimestamp", Value.fromBigInt(value));
  }

  get enableBlockNumber(): BigInt {
    let value = this.get("enableBlockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set enableBlockNumber(value: BigInt) {
    this.set("enableBlockNumber", Value.fromBigInt(value));
  }

  get latestUpdateBlockNumber(): BigInt {
    let value = this.get("latestUpdateBlockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set latestUpdateBlockNumber(value: BigInt) {
    this.set("latestUpdateBlockNumber", Value.fromBigInt(value));
  }

  get latestUpdateTimestamp(): BigInt {
    let value = this.get("latestUpdateTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set latestUpdateTimestamp(value: BigInt) {
    this.set("latestUpdateTimestamp", Value.fromBigInt(value));
  }

  get latestUpdateHash(): string {
    let value = this.get("latestUpdateHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set latestUpdateHash(value: string) {
    this.set("latestUpdateHash", Value.fromString(value));
  }
}

export class ebcRel extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ebcRel entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ebcRel must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ebcRel", id.toString(), this);
    }
  }

  static loadInBlock(id: string): ebcRel | null {
    return changetype<ebcRel | null>(store.get_in_block("ebcRel", id));
  }

  static load(id: string): ebcRel | null {
    return changetype<ebcRel | null>(store.get("ebcRel", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get mdcList(): Array<string> {
    let value = this.get("mdcList");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set mdcList(value: Array<string>) {
    this.set("mdcList", Value.fromStringArray(value));
  }

  get rulesList(): Array<string> {
    let value = this.get("rulesList");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set rulesList(value: Array<string>) {
    this.set("rulesList", Value.fromStringArray(value));
  }

  get ruleLatest(): Array<string> {
    let value = this.get("ruleLatest");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set ruleLatest(value: Array<string>) {
    this.set("ruleLatest", Value.fromStringArray(value));
  }

  get allRulesInfo(): Array<string> {
    let value = this.get("allRulesInfo");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set allRulesInfo(value: Array<string>) {
    this.set("allRulesInfo", Value.fromStringArray(value));
  }

  get statuses(): boolean {
    let value = this.get("statuses");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set statuses(value: boolean) {
    this.set("statuses", Value.fromBoolean(value));
  }

  get latestUpdateHash(): string {
    let value = this.get("latestUpdateHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set latestUpdateHash(value: string) {
    this.set("latestUpdateHash", Value.fromString(value));
  }
}

export class FeeChallengeSecondUpdated extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save FeeChallengeSecondUpdated entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type FeeChallengeSecondUpdated must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("FeeChallengeSecondUpdated", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): FeeChallengeSecondUpdated | null {
    return changetype<FeeChallengeSecondUpdated | null>(
      store.get_in_block("FeeChallengeSecondUpdated", id.toHexString())
    );
  }

  static load(id: Bytes): FeeChallengeSecondUpdated | null {
    return changetype<FeeChallengeSecondUpdated | null>(
      store.get("FeeChallengeSecondUpdated", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get feeChallengeSecond(): BigInt {
    let value = this.get("feeChallengeSecond");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set feeChallengeSecond(value: BigInt) {
    this.set("feeChallengeSecond", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class FeeTakeOnChallengeSecondUpdated extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save FeeTakeOnChallengeSecondUpdated entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type FeeTakeOnChallengeSecondUpdated must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set(
        "FeeTakeOnChallengeSecondUpdated",
        id.toBytes().toHexString(),
        this
      );
    }
  }

  static loadInBlock(id: Bytes): FeeTakeOnChallengeSecondUpdated | null {
    return changetype<FeeTakeOnChallengeSecondUpdated | null>(
      store.get_in_block("FeeTakeOnChallengeSecondUpdated", id.toHexString())
    );
  }

  static load(id: Bytes): FeeTakeOnChallengeSecondUpdated | null {
    return changetype<FeeTakeOnChallengeSecondUpdated | null>(
      store.get("FeeTakeOnChallengeSecondUpdated", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get feeTakeOnChallengeSecond(): BigInt {
    let value = this.get("feeTakeOnChallengeSecond");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set feeTakeOnChallengeSecond(value: BigInt) {
    this.set("feeTakeOnChallengeSecond", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class MaxMDCLimitUpdated extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save MaxMDCLimitUpdated entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type MaxMDCLimitUpdated must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("MaxMDCLimitUpdated", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): MaxMDCLimitUpdated | null {
    return changetype<MaxMDCLimitUpdated | null>(
      store.get_in_block("MaxMDCLimitUpdated", id.toHexString())
    );
  }

  static load(id: Bytes): MaxMDCLimitUpdated | null {
    return changetype<MaxMDCLimitUpdated | null>(
      store.get("MaxMDCLimitUpdated", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get maxMDCLimit(): BigInt {
    let value = this.get("maxMDCLimit");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set maxMDCLimit(value: BigInt) {
    this.set("maxMDCLimit", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class MinChallengeRatioUpdated extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save MinChallengeRatioUpdated entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type MinChallengeRatioUpdated must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("MinChallengeRatioUpdated", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): MinChallengeRatioUpdated | null {
    return changetype<MinChallengeRatioUpdated | null>(
      store.get_in_block("MinChallengeRatioUpdated", id.toHexString())
    );
  }

  static load(id: Bytes): MinChallengeRatioUpdated | null {
    return changetype<MinChallengeRatioUpdated | null>(
      store.get("MinChallengeRatioUpdated", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get minChallengeRatio(): BigInt {
    let value = this.get("minChallengeRatio");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set minChallengeRatio(value: BigInt) {
    this.set("minChallengeRatio", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class OwnershipTransferred extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save OwnershipTransferred entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type OwnershipTransferred must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("OwnershipTransferred", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): OwnershipTransferred | null {
    return changetype<OwnershipTransferred | null>(
      store.get_in_block("OwnershipTransferred", id.toHexString())
    );
  }

  static load(id: Bytes): OwnershipTransferred | null {
    return changetype<OwnershipTransferred | null>(
      store.get("OwnershipTransferred", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get previousOwner(): Bytes | null {
    let value = this.get("previousOwner");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set previousOwner(value: Bytes | null) {
    if (!value) {
      this.unset("previousOwner");
    } else {
      this.set("previousOwner", Value.fromBytes(<Bytes>value));
    }
  }

  get newOwner(): Bytes | null {
    let value = this.get("newOwner");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set newOwner(value: Bytes | null) {
    if (!value) {
      this.unset("newOwner");
    } else {
      this.set("newOwner", Value.fromBytes(<Bytes>value));
    }
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class ProtocolFeeUpdated extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ProtocolFeeUpdated entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type ProtocolFeeUpdated must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ProtocolFeeUpdated", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): ProtocolFeeUpdated | null {
    return changetype<ProtocolFeeUpdated | null>(
      store.get_in_block("ProtocolFeeUpdated", id.toHexString())
    );
  }

  static load(id: Bytes): ProtocolFeeUpdated | null {
    return changetype<ProtocolFeeUpdated | null>(
      store.get("ProtocolFeeUpdated", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get protocolFee(): BigInt {
    let value = this.get("protocolFee");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set protocolFee(value: BigInt) {
    this.set("protocolFee", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class SubmitterFeeUpdated extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save SubmitterFeeUpdated entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type SubmitterFeeUpdated must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("SubmitterFeeUpdated", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): SubmitterFeeUpdated | null {
    return changetype<SubmitterFeeUpdated | null>(
      store.get_in_block("SubmitterFeeUpdated", id.toHexString())
    );
  }

  static load(id: Bytes): SubmitterFeeUpdated | null {
    return changetype<SubmitterFeeUpdated | null>(
      store.get("SubmitterFeeUpdated", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get submitter(): Bytes {
    let value = this.get("submitter");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set submitter(value: Bytes) {
    this.set("submitter", Value.fromBytes(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class ETHDeposit extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ETHDeposit entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type ETHDeposit must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ETHDeposit", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): ETHDeposit | null {
    return changetype<ETHDeposit | null>(
      store.get_in_block("ETHDeposit", id.toHexString())
    );
  }

  static load(id: Bytes): ETHDeposit | null {
    return changetype<ETHDeposit | null>(
      store.get("ETHDeposit", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get sender(): Bytes {
    let value = this.get("sender");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set sender(value: Bytes) {
    this.set("sender", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class FeeManagerOwnershipTransferred extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save FeeManagerOwnershipTransferred entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type FeeManagerOwnershipTransferred must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set(
        "FeeManagerOwnershipTransferred",
        id.toBytes().toHexString(),
        this
      );
    }
  }

  static loadInBlock(id: Bytes): FeeManagerOwnershipTransferred | null {
    return changetype<FeeManagerOwnershipTransferred | null>(
      store.get_in_block("FeeManagerOwnershipTransferred", id.toHexString())
    );
  }

  static load(id: Bytes): FeeManagerOwnershipTransferred | null {
    return changetype<FeeManagerOwnershipTransferred | null>(
      store.get("FeeManagerOwnershipTransferred", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get previousOwner(): Bytes | null {
    let value = this.get("previousOwner");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set previousOwner(value: Bytes | null) {
    if (!value) {
      this.unset("previousOwner");
    } else {
      this.set("previousOwner", Value.fromBytes(<Bytes>value));
    }
  }

  get newOwner(): Bytes | null {
    let value = this.get("newOwner");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set newOwner(value: Bytes | null) {
    if (!value) {
      this.unset("newOwner");
    } else {
      this.set("newOwner", Value.fromBytes(<Bytes>value));
    }
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class SubmissionUpdated extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save SubmissionUpdated entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type SubmissionUpdated must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("SubmissionUpdated", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): SubmissionUpdated | null {
    return changetype<SubmissionUpdated | null>(
      store.get_in_block("SubmissionUpdated", id.toHexString())
    );
  }

  static load(id: Bytes): SubmissionUpdated | null {
    return changetype<SubmissionUpdated | null>(
      store.get("SubmissionUpdated", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get startBlock(): BigInt {
    let value = this.get("startBlock");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set startBlock(value: BigInt) {
    this.set("startBlock", Value.fromBigInt(value));
  }

  get endBlock(): BigInt {
    let value = this.get("endBlock");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endBlock(value: BigInt) {
    this.set("endBlock", Value.fromBigInt(value));
  }

  get submitTimestamp(): BigInt {
    let value = this.get("submitTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set submitTimestamp(value: BigInt) {
    this.set("submitTimestamp", Value.fromBigInt(value));
  }

  get profitRoot(): Bytes {
    let value = this.get("profitRoot");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set profitRoot(value: Bytes) {
    this.set("profitRoot", Value.fromBytes(value));
  }

  get stateTransTreeRoot(): Bytes {
    let value = this.get("stateTransTreeRoot");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set stateTransTreeRoot(value: Bytes) {
    this.set("stateTransTreeRoot", Value.fromBytes(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class SubmitterRegistered extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save SubmitterRegistered entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type SubmitterRegistered must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("SubmitterRegistered", id.toString(), this);
    }
  }

  static loadInBlock(id: string): SubmitterRegistered | null {
    return changetype<SubmitterRegistered | null>(
      store.get_in_block("SubmitterRegistered", id)
    );
  }

  static load(id: string): SubmitterRegistered | null {
    return changetype<SubmitterRegistered | null>(
      store.get("SubmitterRegistered", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get submitter(): Bytes {
    let value = this.get("submitter");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set submitter(value: Bytes) {
    this.set("submitter", Value.fromBytes(value));
  }

  get marginAmount(): BigInt {
    let value = this.get("marginAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set marginAmount(value: BigInt) {
    this.set("marginAmount", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class Withdraw extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Withdraw entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Withdraw must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Withdraw", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Withdraw | null {
    return changetype<Withdraw | null>(store.get_in_block("Withdraw", id));
  }

  static load(id: string): Withdraw | null {
    return changetype<Withdraw | null>(store.get("Withdraw", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get user(): Bytes {
    let value = this.get("user");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set user(value: Bytes) {
    this.set("user", Value.fromBytes(value));
  }

  get chainId(): BigInt {
    let value = this.get("chainId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set chainId(value: BigInt) {
    this.set("chainId", Value.fromBigInt(value));
  }

  get token(): Bytes {
    let value = this.get("token");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set token(value: Bytes) {
    this.set("token", Value.fromBytes(value));
  }

  get debt(): BigInt {
    let value = this.get("debt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set debt(value: BigInt) {
    this.set("debt", Value.fromBigInt(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): string {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set transactionHash(value: string) {
    this.set("transactionHash", Value.fromString(value));
  }
}

export class BlockIntervalUpdated extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save BlockIntervalUpdated entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type BlockIntervalUpdated must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("BlockIntervalUpdated", id.toString(), this);
    }
  }

  static loadInBlock(id: string): BlockIntervalUpdated | null {
    return changetype<BlockIntervalUpdated | null>(
      store.get_in_block("BlockIntervalUpdated", id)
    );
  }

  static load(id: string): BlockIntervalUpdated | null {
    return changetype<BlockIntervalUpdated | null>(
      store.get("BlockIntervalUpdated", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get blockInterval(): BigInt {
    let value = this.get("blockInterval");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockInterval(value: BigInt) {
    this.set("blockInterval", Value.fromBigInt(value));
  }

  get latestUpdateBlockNumber(): BigInt {
    let value = this.get("latestUpdateBlockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set latestUpdateBlockNumber(value: BigInt) {
    this.set("latestUpdateBlockNumber", Value.fromBigInt(value));
  }

  get latestUpdateTimestamp(): BigInt {
    let value = this.get("latestUpdateTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set latestUpdateTimestamp(value: BigInt) {
    this.set("latestUpdateTimestamp", Value.fromBigInt(value));
  }

  get latestUpdateHash(): string {
    let value = this.get("latestUpdateHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set latestUpdateHash(value: string) {
    this.set("latestUpdateHash", Value.fromString(value));
  }
}

export class HistoryBlocksRootSaved extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save HistoryBlocksRootSaved entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type HistoryBlocksRootSaved must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("HistoryBlocksRootSaved", id.toString(), this);
    }
  }

  static loadInBlock(id: string): HistoryBlocksRootSaved | null {
    return changetype<HistoryBlocksRootSaved | null>(
      store.get_in_block("HistoryBlocksRootSaved", id)
    );
  }

  static load(id: string): HistoryBlocksRootSaved | null {
    return changetype<HistoryBlocksRootSaved | null>(
      store.get("HistoryBlocksRootSaved", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get blocksRoot(): string {
    let value = this.get("blocksRoot");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set blocksRoot(value: string) {
    this.set("blocksRoot", Value.fromString(value));
  }

  get blockInterval(): BigInt {
    let value = this.get("blockInterval");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockInterval(value: BigInt) {
    this.set("blockInterval", Value.fromBigInt(value));
  }

  get latestUpdateBlockNumber(): BigInt {
    let value = this.get("latestUpdateBlockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set latestUpdateBlockNumber(value: BigInt) {
    this.set("latestUpdateBlockNumber", Value.fromBigInt(value));
  }

  get latestUpdateTimestamp(): BigInt {
    let value = this.get("latestUpdateTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set latestUpdateTimestamp(value: BigInt) {
    this.set("latestUpdateTimestamp", Value.fromBigInt(value));
  }

  get latestUpdateHash(): string {
    let value = this.get("latestUpdateHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set latestUpdateHash(value: string) {
    this.set("latestUpdateHash", Value.fromString(value));
  }
}

export class InjectOwnerUpdated extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save InjectOwnerUpdated entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type InjectOwnerUpdated must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("InjectOwnerUpdated", id.toString(), this);
    }
  }

  static loadInBlock(id: string): InjectOwnerUpdated | null {
    return changetype<InjectOwnerUpdated | null>(
      store.get_in_block("InjectOwnerUpdated", id)
    );
  }

  static load(id: string): InjectOwnerUpdated | null {
    return changetype<InjectOwnerUpdated | null>(
      store.get("InjectOwnerUpdated", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get injectOwner(): Bytes {
    let value = this.get("injectOwner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set injectOwner(value: Bytes) {
    this.set("injectOwner", Value.fromBytes(value));
  }

  get latestUpdateBlockNumber(): BigInt {
    let value = this.get("latestUpdateBlockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set latestUpdateBlockNumber(value: BigInt) {
    this.set("latestUpdateBlockNumber", Value.fromBigInt(value));
  }

  get latestUpdateTimestamp(): BigInt {
    let value = this.get("latestUpdateTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set latestUpdateTimestamp(value: BigInt) {
    this.set("latestUpdateTimestamp", Value.fromBigInt(value));
  }

  get latestUpdateHash(): string {
    let value = this.get("latestUpdateHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set latestUpdateHash(value: string) {
    this.set("latestUpdateHash", Value.fromString(value));
  }
}

export class MDCLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): MDC[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<MDC[]>(value);
  }
}

export class challengeManagerLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): challengeManager[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<challengeManager[]>(value);
  }
}

export class FactoryManagerLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): FactoryManager[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<FactoryManager[]>(value);
  }
}

export class ebcRelLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): ebcRel[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<ebcRel[]>(value);
  }
}

export class DealerLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): Dealer[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<Dealer[]>(value);
  }
}

export class allRulesInfoLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): allRulesInfo[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<allRulesInfo[]>(value);
  }
}

export class ruleRelLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): ruleRel[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<ruleRel[]>(value);
  }
}

export class SubgraphManagerLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): SubgraphManager[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<SubgraphManager[]>(value);
  }
}

export class mdcLatestColumnLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): mdcLatestColumn[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<mdcLatestColumn[]>(value);
  }
}

export class chainPairManagerLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): chainPairManager[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<chainPairManager[]>(value);
  }
}

export class tokenPairManagerLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): tokenPairManager[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<tokenPairManager[]>(value);
  }
}

export class chainRelLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): chainRel[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<chainRel[]>(value);
  }
}
