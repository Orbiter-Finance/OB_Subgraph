interface ChallengeInfoUpdated {
  id: ID!
  challengeId: String! # bytes32
  sourceTxFrom: BigInt # uint256
  sourceTxTime: BigInt! # uint64
  challenger: String! # address
  freezeToken: String! # address
  challengeUserRatio: BigInt # uint64
  freezeAmount0: BigInt! # uint256
  freezeAmount1: BigInt! # uint256
  challengeTime: BigInt! # uint64
  abortTime: BigInt # uint64
  sourceTxBlockNum: BigInt!
  sourceTxIndex: BigInt!
  challengerVerifyTransactionFee: BigInt!
  verifiedTime0: BigInt # uint64
  verifiedTime1: BigInt # uint64
  verifiedDataHash0: String
  latestUpdateHash: String!
  latestUpdateTimestamp: BigInt!
  latestUpdateBlockNumber: BigInt!
}

enum ChallengeStatuses {
  CREATE
  VERIFY_SOURCE
  VERIFY_DEST
  LIQUIDATION
}

enum StringInit {
  EMPTY
  INVALID
}

type challengeManager @entity {
  id: ID! #hash(challengeId, mdcAddress)
  challengeId: String! # bytes32
  mdcAddr: String! # address of mdc
  owner: String! # address of maker
  challengeStatuses: ChallengeStatuses!
  createChallenge: [createChallenge!]!
  # verifyChallengeSource result
  sourceTxFrom: String! # address
  challengeUserRatio: BigInt! # uint64
  verifyChallengeSourceTimestamp: BigInt! # uint64
  verifiedDataHash0: String!
  verifyPassChallenger: String! # address who create this challenge
  # verifyChallengeSource info
  # challengerVerifyTransactionFee: BigInt!
  challengeSourceVerifier: String! # address who verified this challenge
  verifyChallengeSourceHash: String!
  verifyChallengeSourceNumber: BigInt!
  # verifyChallengeDest result
  challengeDestVerifier: String! # address who verified this challenge
  verifyChallengeDestTimestamp: BigInt! # uint64
  verifyChallengeDestHash: String!
  verifyChallengeDestNumber: BigInt!

  mdc: MDC! @derivedFrom(field: "challengeManager")
}

type createChallenge @entity {
  id: ID! #hash(challengeId, challengerAddress, mdcAddress, createChallengeTimestamp)
  # Challenge statement
  challengeId: String! # bytes32 hash(sourceChainId, sourceTxHash)
  sourceChainId: BigInt!
  ruleKey: String! # hash(chain0,chain1,token0,token1)
  sourceTxHash: String! # bytes32
  sourceTxTime: BigInt! # uint64
  challenger: String! # address
  freezeToken: String! # address
  freezeAmountMaker: BigInt! # uint256
  freezeAmountChallenger: BigInt! # uint256
  createChallengeTimestamp: BigInt! # uint64 timestamp of createChallenge
  sourceTxBlockNum: BigInt! # uint64 challenge tx block number
  sourceTxIndex: BigInt! # uint64 challenge tx index
  challengeNodeNumberParent: String! # challengeNodeNumber last number
  challengeNodeNumber: String! # sorting: encodePacked(sourceTxTime,sourceChainId,blocknumer,TxIndex)
  # info
  isVerifyPass: Boolean!
  totalChallengeVerifyCost: BigInt! # uint: WEI
  createChallengeHash: String! # txHash of createChallenge
  createChallengeBlockNumber: BigInt! # blockNumber of createChallenge
  # liquidation
  liquidator: String # address who liquidated this challenge
  liquidationTimestamp: BigInt #timestamp of liquidation this challenge of challenger
  liquidationHash: String # txHash of liquidation this challenge of challenger
  liquidationBlockNumber: BigInt
  # Rel
  challengeManager: challengeManager! @derivedFrom(field: "createChallenge")
}

type withdrawRequestList @entity(immutable: true) {
  id: ID! # log-index
  owner: String!
  requestAmount: BigInt! # uint256
  minWithdrawTimestamp: BigInt! # uint64
  requestToken: String! # address
  latestUpdateHash: String!
  latestUpdateTimestamp: BigInt!
  latestUpdateBlockNumber: BigInt!
  # Rel
  mdc: MDC! @derivedFrom(field: "withdrawRequestList") # MDC
}

enum columnArrayStatuses {
  PARAMETER_DUPLICATION
  ALL_CLEAR
}

type columnArraySnapshot @entity(immutable: true) {
  id: ID! # hash(txHash - logIndex)
  columnArrayHash: String! # bytes32
  dealers: [String!]! # address[]
  dealerMappingSnapshot: [dealerMappingSnapshot!]! # dealer address mapping, defined by maker
  ebcs: [String!]! # address[]
  ebcMappingSnapshot: [ebcMappingSnapshot!]! # ebc address mapping, defined by maker
  chainIds: [BigInt!]! # uint64[]
  chainIdMappingSnapshot: [chainIdMappingSnapshot!]! # chainId mapping, defined by maker
  columnArrayStatuses: columnArrayStatuses!
  # Time
  enableTimestamp: BigInt! # uint64
  latestUpdateHash: String!
  latestUpdateTimestamp: BigInt!
  latestUpdateBlockNumber: BigInt!
  # Rel
  mdc: MDC! @derivedFrom(field: "columnArraySnapshot") # MDC
}

type responseMakersSnapshot @entity {
  id: ID! # hash(mdc address - txHash - logIndex)
  responseMakerList: [String!]! # responseMaker address array
  enableTimestamp: BigInt
  owner: String!
  mdc: MDC! @derivedFrom(field: "responseMakersSnapshot") # MDC
  latestUpdateHash: String
  latestUpdateTimestamp: BigInt
  latestUpdateBlockNumber: BigInt
}

# customed using entity
type MDC @entity {
  # base info
  id: ID! # mdc address
  owner: String! # maker address
  factoryAddr: String! # mdc factory address
  manager: String # ob manager address
  # Rel
  ruleUpdateRel: [ruleUpdateRel!]!
  responseMakersSnapshot: [responseMakersSnapshot!]! #snapshot
  ruleSnapshot: [ruleRel!]! #snapshot
  ruleLatest: [latestRule!]! #latestData
  currBoundSpvInfo: [currBoundSpvInfo!]! # currBoundSpvInfo
  columnArraySnapshot: [columnArraySnapshot!]! # columnArraySnapshot
  challengeManager: [challengeManager!]!
  withdrawRequestList: [withdrawRequestList!]!
  # derived info
  factory: [FactoryManager!]! @derivedFrom(field: "mdcs")
  ebc: [ebcRel!]! @derivedFrom(field: "mdcList") # EBC
  dealer: [Dealer!]! @derivedFrom(field: "mdcs") # Dealer
  # Time related
  createblockNumber: BigInt!
  createblockTimestamp: BigInt!
  createtransactionHash: String!
  latestUpdatetransactionHash: String!
}

type ruleUpdateRel @entity {
  id: ID! # hash(mdc, ebc, chain0, chain1)
  ruleUpdateVersion: [ruleUpdateVersion!]!
  latestVersion: BigInt!
  # Rel
  mdc: MDC! @derivedFrom(field: "ruleUpdateRel")
  ebc: ebcRel! @derivedFrom(field: "ruleUpdateRel")
  latestRule: latestRule! @derivedFrom(field: "ruleUpdateRel")
  latestUpdateHash: String
  latestUpdateTimestamp: BigInt
  latestUpdateBlockNumber: BigInt
}

type ruleUpdateVersion
  @entity(immutable: true) { # every rule update
  # As MDC LatestRule: hash(hash(mdc, ebc, chain0, chain1), updateVersion)
  id: ID!
  makerHash: String! # hash(mdc, ebc, chain0, chain1)
  owner: String! # address
  updateVersion: BigInt! # version++
  mdcAddr: String! # address
  ebcAddr: String! # address
  type: String # ETH/ERC20
  chain0: BigInt # uint64
  chain1: BigInt # uint64
  chain0Status: Int # uint8
  chain1Status: Int # uint8
  chain0Token: String # Address
  chain1Token: String # Address
  chain0minPrice: BigInt # uint128
  chain1minPrice: BigInt # uint128
  chain0maxPrice: BigInt # uint128
  chain1maxPrice: BigInt # uint128
  chain0WithholdingFee: BigInt # uint128
  chain1WithholdingFee: BigInt # uint128
  chain0TradeFee: Int # uint16
  chain1TradeFee: Int # uint16
  chain0ResponseTime: Int # uint32
  chain1ResponseTime: Int # uint32
  chain0CompensationRatio: Int # uint32
  chain1CompensationRatio: Int # uint32
  enableTimestamp: BigInt # uint64
  latestUpdateVersion: Int # uint32
  latestUpdateTimestamp: BigInt
  latestUpdateBlockNumber: BigInt
  latestUpdateHash: String
  ruleValidation: Boolean!
  ruleValidationErrorstatus: String!

  # Related
  ruleUpdateRel: [ruleUpdateRel!]! @derivedFrom(field: "ruleUpdateVersion")
  ruleRel: [ruleRel!]! @derivedFrom(field: "ruleUpdateVersion")
}

interface PairManager {
  id: ID!
  #Rel
  latestRule: [latestRule!]!
  latestUpdateHash: String
  latestUpdateTimestamp: BigInt
  latestUpdateBlockNumber: BigInt
}

type chainPairManager implements PairManager @entity {
  id: ID! # chain0Id-chain1Id: 5-420
  #Rel
  latestRule: [latestRule!]!
  latestUpdateHash: String
  latestUpdateTimestamp: BigInt
  latestUpdateBlockNumber: BigInt
}

type tokenPairManager implements PairManager @entity {
  id: ID! # token id: 0x00000000000000000000000076fc39362ef66dad742791bde738b9b050c3cbf5
  #Rel
  latestRule: [latestRule!]!
  latestUpdateHash: String
  latestUpdateTimestamp: BigInt
  latestUpdateBlockNumber: BigInt
}

# entity to save the latest column of MDC, no need to storage in MDC entity
type mdcLatestColumn @entity {
  id: ID! # mdc address
  dealerMapping: [DealerMapping!]! # dealer address mapping, defined by maker
  ebcMapping: [ebcMapping!]! # ebc address mapping, defined by maker
  chainIdMapping: [chainIdMapping!]! # chainId mapping, defined by maker
  # mdc: [MDC!]! @derivedFrom(field: "mdcLatestColumn") # MDC
  latestUpdateHash: String
  latestUpdateTimestamp: BigInt
  latestUpdateBlockNumber: BigInt
}

# customed using entity
type Dealer @entity {
  id: ID! # dealer address
  mdcs: [MDC!]! # binding MDC
  rules: [ruleRel!]! # binding ruleSnapshot
  feeRatio: BigInt! # uint
  extraInfo: String! # string
  register: Boolean!
  latestUpdateHash: String!
  latestUpdateTimestamp: BigInt!
  latestUpdateBlockNumber: BigInt!
}

type SubgraphManager @entity {
  id: ID! #101
  factory: [FactoryManager!]!
  totalFactory: Int!
  currentFactoryTemplate: Int!
}

# customed using entity
type FactoryManager @entity {
  id: ID! # factory address
  mdcs: [MDC!]! # MDC[]
  owners: [String!]! # ownerAddress
  responseMakers: [responseMaker!]! # responseMaker[]
  mdcCounts: BigInt!
  # latestUpdateHash: String!
  # latestUpdateTimestamp: BigInt!
  # latestUpdateBlockNumber: BigInt!
  #Rel
  subgraphManager: SubgraphManager! @derivedFrom(field: "factory")
}

type responseMaker @entity {
  id: ID! # responseMaker address
  mdcs: [MDC!]! # MDC[]
  factory: FactoryManager! @derivedFrom(field: "responseMakers") # FactoryManager
  latestUpdateHash: String!
  latestUpdateTimestamp: BigInt!
  latestUpdateBlockNumber: BigInt!
}

# customed using entity
type ebcMapping @entity {
  id: ID! # mdc address - ebc address
  owner: String! # address
  ebcAddr: String! # ebc address
  ebcIndex: BigInt # uint64
  enableTimestamp: BigInt
  latestUpdateBlockNumber: BigInt
  latestUpdateTimestamp: BigInt
  latestUpdateHash: String
  mdcLatestColumn: mdcLatestColumn! @derivedFrom(field: "ebcMapping") # mdcLatestColumn
}

# customed using entity
type ebcMappingSnapshot @entity {
  id: ID! # mdc address - ebc address
  owner: String! # address
  ebcAddr: String! # ebc address
  ebcIndex: BigInt # uint64
  # ebcSnapshot: ebcSnapshot! @derivedFrom(field: "ebcMappingSnapshot") # ebcSnapshot
}

# customed using entity
type currBoundSpvInfo @entity {
  id: ID! # mdc address - ChainId
  chainId: BigInt # uint64 - the index of state varible "_spvs[]" in MDC contract
  spv: String # spv address - the value of state varible "_spvs[]" in MDC contract
  enableTimestamp: BigInt
  mdc: MDC! @derivedFrom(field: "currBoundSpvInfo") # MDC
}

# # customed using entity
# type dealerSnapshot @entity {
#   id: ID! # txHash - logIndex
#   dealerList: [String!]! # dealer address array
#   dealerMappingSnapshot: [dealerMappingSnapshot!]! # dealer address mapping, defined by maker
#   columnArrayHash: String
#   enableTimestamp: BigInt
#   latestUpdateHash: String
#   latestUpdateTimestamp: BigInt
#   latestUpdateBlockNumber: BigInt
#   # Rel
#   mdc: MDC! @derivedFrom(field: "dealerSnapshot") # MDC
# }

# # customed using entity
# type ebcSnapshot @entity {
#   id: ID! # txHash - logIndex
#   ebcList: [String!]! # ebc address array
#   ebcMappingSnapshot: [ebcMappingSnapshot!]! # ebc address mapping, defined by maker
#   columnArrayHash: String
#   enableTimestamp: BigInt
#   latestUpdateHash: String
#   latestUpdateTimestamp: BigInt
#   latestUpdateBlockNumber: BigInt
#   # Rel
#   mdc: MDC! @derivedFrom(field: "ebcSnapshot") # MDC
# }

# type chainIdSnapshot @entity {
#   id: ID! # txHash - logIndex
#   chainIdList: [BigInt!]! # chainId array
#   chainIdMappingSnapshot: [chainIdMappingSnapshot!]! # chainId mapping, defined by maker
#   columnArrayHash: String
#   enableTimestamp: BigInt
#   latestUpdateHash: String
#   latestUpdateTimestamp: BigInt
#   latestUpdateBlockNumber: BigInt
#   # Rel
#   mdc: MDC! @derivedFrom(field: "chainIdSnapshot") # MDC
# }

# customed using entity
type DealerMapping @entity {
  id: ID! # mdc address - dealer address
  owner: String! # address
  dealerAddr: String! # dealer address
  dealerIndex: BigInt # uint64
  enableTimestamp: BigInt # uint64
  latestUpdateBlockNumber: BigInt
  latestUpdateTimestamp: BigInt
  latestUpdateHash: String
  mdcLatestColumn: mdcLatestColumn! @derivedFrom(field: "dealerMapping") # mdcLatestColumn
}

# customed using entity
type dealerMappingSnapshot @entity {
  id: ID! # hash(mdc address - dealer address - txHash - logIndex)
  owner: String! # address
  dealerAddr: String! # dealer address
  dealerIndex: BigInt # uint64
  # dealerSnapshot: dealerSnapshot! @derivedFrom(field: "dealerMappingSnapshot") # dealerSnapshot
}

# customed using entity
type chainIdMapping @entity {
  id: ID! # mdc address - chainId
  owner: String! # address
  chainId: BigInt! # chainId
  chainIdIndex: BigInt # uint64
  enableTimestamp: BigInt # uint64
  latestUpdateBlockNumber: BigInt
  latestUpdateTimestamp: BigInt
  latestUpdateHash: String
}

type chainIdMappingSnapshot @entity {
  id: ID! # mdc address - chainId
  owner: String! # address
  chainId: BigInt! # chainId
  chainIdIndex: BigInt # uint64
  # chainIdSnapshot: chainIdSnapshot!
  #   @derivedFrom(field: "chainIdMappingSnapshot")
}

# customed using entity
type ruleRel
  @entity { #contain all rules snapshot
  # As MDC snapshot, id: hash(mdc-ecb-transactionHash-logIndex)
  id: ID!
  # rules: [rule!]! # rules in input Data
  type: String! # ETH/ERC20
  ruleLatest: [latestRuleSnapshot!]! # all latest rules
  root: String! # String
  version: Int! # uint32
  sourceChainIds: [BigInt!]! # uint64[]
  pledgeAmounts: [BigInt!]! # uint[]
  token: String! # address
  ruleUpdateVersion: [ruleUpdateVersion!]!
  # related to rule
  # mappingSnapshot: [mdcLatestColumn!] # ruleMapping
  mdc: MDC! @derivedFrom(field: "ruleSnapshot") # MDC
  ebc: ebcRel! @derivedFrom(field: "rulesList") # EBCs
  # dealer: Dealer! @derivedFrom(field: "rules") # Dealer

  latestUpdateHash: String
  latestUpdateTimestamp: BigInt
  latestUpdateBlockNumber: BigInt
}

# customed using entitys
type latestRule
  @entity { # latest rule
  # As MDC LatestRule: hash(mdc,ebc,chain0,chain1,token0,token1)
  id: ID!
  owner: String! # address
  mdcAddr: String! # address
  ebcAddr: String! # address
  ruleKey: String # hash(chain0,chain1,token0,token1)
  type: String # ETH/ERC20
  chain0: BigInt! # uint64
  chain1: BigInt! # uint64
  chain0Status: Int # uint8
  chain1Status: Int # uint8
  chain0Token: String! # Address
  chain1Token: String! # Address
  chain0minPrice: BigInt # uint128
  chain1minPrice: BigInt # uint128
  chain0maxPrice: BigInt # uint128
  chain1maxPrice: BigInt # uint128
  chain0WithholdingFee: BigInt # uint128
  chain1WithholdingFee: BigInt # uint128
  chain0TradeFee: Int # uint16
  chain1TradeFee: Int # uint16
  chain0ResponseTime: Int # uint32
  chain1ResponseTime: Int # uint32
  chain0CompensationRatio: Int # uint32
  chain1CompensationRatio: Int # uint32
  enableTimestamp: BigInt # uint64
  latestUpdateVersion: Int # uint32
  latestUpdateTimestamp: BigInt
  latestUpdateBlockNumber: BigInt
  latestUpdateHash: String
  ruleValidation: Boolean!
  ruleValidationErrorstatus: String!
  root: String!
  # Rel
  ruleUpdateRel: [ruleUpdateRel!]!
  latestSnapShotID: String!
  ebc: ebcRel! @derivedFrom(field: "ruleLatest") # EBCs
  mdc: MDC! @derivedFrom(field: "ruleLatest") # MDC
  chainPairManager: chainPairManager! @derivedFrom(field: "latestRule")
  tokenPairManager: tokenPairManager! @derivedFrom(field: "latestRule")
}

# customed using entitys
type latestRuleSnapshot
  @entity(immutable: true) { # latest rule
  id: ID! # As MDC LatestRuleSnapshot: hash(mdc,ebc,chain0,chain1,token0,token1)
  owner: String! # address
  mdcAddr: String! # address
  ebcAddr: String! # address
  ruleKey: String # hash(chain0,chain1,token0,token1)
  type: String # ETH/ERC20
  chain0: BigInt! # uint64
  chain1: BigInt! # uint64
  chain0Status: Int # uint8
  chain1Status: Int # uint8
  chain0Token: String! # Address
  chain1Token: String! # Address
  chain0minPrice: BigInt # uint128
  chain1minPrice: BigInt # uint128
  chain0maxPrice: BigInt # uint128
  chain1maxPrice: BigInt # uint128
  chain0WithholdingFee: BigInt # uint128
  chain1WithholdingFee: BigInt # uint128
  chain0TradeFee: Int # uint16
  chain1TradeFee: Int # uint16
  chain0ResponseTime: Int # uint32
  chain1ResponseTime: Int # uint32
  chain0CompensationRatio: Int # uint32
  chain1CompensationRatio: Int # uint32
  enableTimestamp: BigInt # uint64
  enableBlockNumber: BigInt
  latestUpdateVersion: Int # uint32
  latestUpdateTimestamp: BigInt
  latestUpdateBlockNumber: BigInt
  latestUpdateHash: String
  ruleValidation: Boolean!
  ruleValidationErrorstatus: String!
  # ebc: ebcRel! @derivedFrom(field: "ruleLatest") # EBCs
  # mdc: MDC! @derivedFrom(field: "ruleLatest") # MDC
  ruleRelSnapshot: ruleRel! @derivedFrom(field: "ruleLatest") # ruleRel
}

# using entity, binding in contract Event
type chainRel @entity {
  id: ID! # chainId
  tokens: [tokenRel!]! # ChainToken
  spvs: [String!]! # address[]
  nativeToken: String! # address
  batchLimit: BigInt # uint192
  minVerifyChallengeSourceTxSecond: BigInt # uint64
  maxVerifyChallengeSourceTxSecond: BigInt # uint64
  minVerifyChallengeDestTxSecond: BigInt # uint64
  maxVerifyChallengeDestTxSecond: BigInt # uint64
  enableTimestamp: BigInt # uint64
  latestUpdateBlockNumber: BigInt!
  latestUpdateTimestamp: BigInt!
  latestUpdateHash: String!
}

# using entity, binding in contract Event
type tokenRel @entity {
  id: ID! # hash(chain - token Address)
  tokenAddress: String! # address
  chainId: String! # chainId
  symbol: String! # string
  name: String! # string
  mainnetToken: String # address
  decimals: Int # uint8
  chain: [chainRel!]! @derivedFrom(field: "tokens") # ChainInfo
  latestUpdateBlockNumber: BigInt!
  latestUpdateTimestamp: BigInt!
  latestUpdateHash: String!
}

type challengeUserRatioSnapshot @entity(immutable: true) {
  id: ID! # hash(orManagerAddress,txHash,logIndex)
  orManagerAddress: String! # address
  challengeUserRatio: BigInt! # uint64
  enableTimestamp: BigInt! # uint64
  enableBlockNumber: BigInt!
  latestUpdateBlockNumber: BigInt!
  latestUpdateTimestamp: BigInt!
  latestUpdateHash: String!
}

# using entity, binding in contract Event
type ebcRel @entity {
  id: ID! #ebc address
  mdcList: [MDC!]! # list all mdc!! who bind this ebc
  rulesList: [ruleRel!]! # list all rules Snapshot!! who bind this ebc
  ruleLatest: [latestRule!]! # list all latest rules!! who bind this ebc
  ruleUpdateRel: [ruleUpdateRel!]!
  statuses: Boolean!
  latestUpdateHash: String!
}

type FeeChallengeSecondUpdated @entity(immutable: true) {
  id: Bytes!
  feeChallengeSecond: BigInt! # uint64
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type FeeTakeOnChallengeSecondUpdated @entity(immutable: true) {
  id: Bytes!
  feeTakeOnChallengeSecond: BigInt! # uint64
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type MaxMDCLimitUpdated @entity(immutable: true) {
  id: Bytes!
  maxMDCLimit: BigInt! # uint64
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type MinChallengeRatioUpdated @entity(immutable: true) {
  id: Bytes!
  minChallengeRatio: BigInt! # uint64
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type OwnershipTransferred @entity(immutable: true) {
  id: Bytes!
  previousOwner: Bytes # address
  newOwner: Bytes # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ProtocolFeeUpdated @entity(immutable: true) {
  id: Bytes!
  protocolFee: BigInt! # uint64
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type SubmitterFeeUpdated @entity(immutable: true) {
  id: Bytes!
  submitter: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ETHDeposit @entity(immutable: true) {
  id: Bytes!
  sender: Bytes! # address
  amount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type FeeManagerOwnershipTransferred @entity(immutable: true) {
  id: Bytes!
  previousOwner: Bytes # address
  newOwner: Bytes # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type SubmissionUpdated @entity(immutable: true) {
  id: Bytes!
  startBlock: BigInt! # uint64
  endBlock: BigInt! # uint64
  submitTimestamp: BigInt! # uint64
  profitRoot: Bytes! # bytes32
  stateTransTreeRoot: Bytes! # bytes32
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type SubmitterRegistered @entity(immutable: true) {
  id: ID!
  submitter: Bytes! # address
  marginAmount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Withdraw @entity(immutable: true) {
  # id:hash(transactionHash, logIndex)
  id: ID!
  user: Bytes! # address
  chainId: BigInt! # uint64
  token: Bytes! # address
  debt: BigInt! # uint256
  amount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: String!
}
type BlockIntervalUpdated @entity(immutable: true) {
  id: ID!
  blockInterval: BigInt! # uint64
  latestUpdateBlockNumber: BigInt!
  latestUpdateTimestamp: BigInt!
  latestUpdateHash: String!
}

type HistoryBlocksRootSaved @entity(immutable: true) {
  id: ID! # block number
  blocksRoot: String! # bytes32
  blockInterval: BigInt! # uint256
  latestUpdateBlockNumber: BigInt!
  latestUpdateTimestamp: BigInt!
  latestUpdateHash: String!
}

type InjectOwnerUpdated @entity(immutable: true) {
  id: ID!
  injectOwner: Bytes! # address
  latestUpdateBlockNumber: BigInt!
  latestUpdateTimestamp: BigInt!
  latestUpdateHash: String!
}
